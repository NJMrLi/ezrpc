// Code generated by go-bindata.
// sources:
// tmpl/.DS_Store
// tmpl/csharp/server.gocs
// tmpl/golang/server.gogo
// DO NOT EDIT!

package tmpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplDs_store = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x98\xc1\x4a\xc4\x30\x10\x86\xff\x89\x45\x02\x5e\x72\xf4\x98\x57\xf0\x0d\xc2\xb2\x3e\xc1\xbe\x80\x82\xd0\xcb\xd2\x82\xa0\xe7\x9c\x7c\x2e\x1f\xcd\x86\xf9\x45\xb1\x2d\xd4\x53\xc5\xfd\x3f\x08\xdf\xc2\xce\x4c\xdb\x4b\x26\x13\x00\x76\x78\x79\xba\x03\xd2\xf4\x33\xc2\x8d\x37\x2c\x12\xb9\x66\x04\xda\x7c\x4d\x35\x06\xf4\xaf\xa7\xe7\xe1\x3c\x0e\xfd\x72\xad\x19\x2d\xf7\x1a\x3d\x46\x9c\xf1\xf8\x23\xdf\x36\xd6\x10\x42\x08\x21\xc4\x76\xd8\x5f\xe3\xcd\xbe\xaf\x21\x84\xf8\x83\xb4\xfd\x21\xd3\x85\xae\x6e\xe3\xff\x81\xee\xbe\xe5\x24\x3a\xd3\x85\xae\x6e\x63\x5c\xa0\x3b\x3a\xd2\x89\xce\x74\xa1\xab\x9b\x9b\x96\x71\xf8\x30\x3e\xd9\x38\xa1\x58\xa2\x33\x5d\x7e\xf9\xd1\x42\x5c\x08\x57\xae\xd4\xfa\xff\x3d\x56\xe7\x7f\x21\xc4\x3f\xc6\xba\xe3\xe9\x78\xc0\xfa\x85\x5b\xeb\xb5\x79\x5a\x0f\x8c\x79\xff\x4c\x5c\x39\x08\x04\xbf\x30\xbc\xc5\x57\x5c\xa6\x0b\x5d\xdd\x3a\x0c\x08\xb1\x07\x1f\x01\x00\x00\xff\xff\x39\x97\xc4\xee\x04\x18\x00\x00")

func tmplDs_storeBytes() ([]byte, error) {
	return bindataRead(
		_tmplDs_store,
		"tmpl/.DS_Store",
	)
}

func tmplDs_store() (*asset, error) {
	bytes, err := tmplDs_storeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/.DS_Store", size: 6148, mode: os.FileMode(420), modTime: time.Unix(1467776856, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplCsharpServerGocs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x54\xdf\x8b\xe3\x36\x10\x7e\xb6\xff\x8a\x21\x2c\xd4\x0e\x39\xa5\xcf\x17\xee\x61\x6f\x2f\xb4\x0b\xcd\xdd\x72\x49\x29\xec\xcb\xa2\xc8\x93\x44\xad\x2d\x19\x49\xce\xae\x1b\xfc\xbf\x77\x24\xcb\xf9\xd1\x2c\xed\xb6\x50\x7a\x21\x24\x96\xf4\xcd\x37\x9a\x99\xef\xf3\xe1\x70\xe3\xaa\xba\x2c\xb8\xe3\xf0\xfe\x03\x30\x78\xd7\x75\xe9\x74\x3c\x4e\x61\x0c\xab\x9d\xb4\xb0\x91\x25\x02\xfd\xf3\xc6\xe9\x2d\x2a\x34\xdc\x61\x01\xeb\x16\xf0\x77\x53\x0b\x0f\xfb\xa4\xd5\x77\x0e\xc4\x8e\xab\x2d\x42\xc5\x55\xc3\xcb\xb2\xa5\x83\x69\x9a\x36\x56\xaa\x2d\xcc\x1f\xbf\x3e\xdc\xb1\xcf\xdc\xd9\x59\xdc\xf9\x7c\xbb\x5a\xb2\xbb\x52\xa2\x72\xc3\xd6\xb2\xb5\x0e\xab\x61\xb5\xda\x19\xb9\x71\x6c\x65\xb8\xb2\xb5\x36\x84\x4a\x15\xaf\xd0\xd6\x5c\x20\x1c\x0e\x44\x16\x17\x5d\x07\x87\x34\xb1\x8e\x3b\x29\x40\x94\xdc\x5a\x7f\xbc\x44\xb3\x97\x02\x03\xac\xeb\xe2\xca\x03\x93\xe9\x14\x1e\x8c\x16\x68\xad\x36\xbe\xac\x8b\x92\xe2\x42\x1b\x02\xd6\x46\xee\x69\x1f\x22\xf5\x15\x29\x3b\xd1\xd4\xc3\xd3\xd3\xec\x3a\xf0\xfe\x4e\x2b\x85\xc2\x49\xad\x40\xd0\x23\x61\x3c\xa8\x59\x97\x74\x18\x31\x7b\x2d\x0b\x90\x4a\xba\xec\x4d\x69\x26\x97\xa4\x79\x28\x2c\x39\xdd\x02\x3e\x9c\xb0\xfe\x46\x49\xc8\x4b\xbb\x22\xe4\x4e\x04\x5b\x36\x6b\x2b\x8c\x5c\xe3\xad\x6d\x95\xc8\x46\x5f\x14\xbb\xce\x3c\x1e\x4d\x40\xab\x8f\x46\xf3\x42\x70\xeb\xf2\xd9\xeb\xb1\xaf\x07\x8e\x82\x3c\x02\xc3\xc2\x6e\x43\x6c\x97\x5e\x77\x27\x54\x1e\x20\x99\x5e\xff\x4a\x15\x81\x45\x55\x20\x95\x48\x5b\x3f\x72\x55\x94\x68\xe6\x7b\x92\xc9\xad\xd9\x5a\xc0\x58\xea\x9e\x1b\x70\x5e\x1a\x54\x93\xc2\xe7\x2b\xb5\xb0\xd5\x02\x2b\x6d\xda\x8f\xcd\x66\x83\x26\x43\xb6\xa0\x5e\xf0\x2d\xb2\x4f\x24\xf3\xbe\x0e\x4f\x21\xa9\x4b\x2e\x52\xcc\x1f\xa9\xd1\x4e\x67\x81\x36\x9f\x01\xe9\x44\x2a\x0f\x74\xa6\xed\x93\x42\x72\xc1\x0a\xeb\x66\x13\x98\x80\x3e\x31\x1a\xb4\x67\x3c\xee\x52\x09\x50\xd9\x6d\xdf\xf4\xc4\x3e\x4b\x27\x76\x70\x76\x1b\xea\xa4\x2f\x39\x16\x95\x1c\x0e\xef\xc0\x04\x13\xdd\x78\xad\x4f\xe0\xa6\x42\xb7\xd3\x45\xf0\xe5\xd0\xe2\x45\xd8\xb2\x64\xd2\x21\x44\x6e\x40\x51\x19\xd9\xcf\x4e\x96\x96\xdd\xdb\xe3\xc0\x7a\xe8\xc0\x92\xc7\x10\x3a\x41\x18\x9d\xd9\xfe\xcf\xd3\xa3\x23\x15\x9e\x46\xef\x43\xc0\x90\x24\xf2\xb0\x2f\xd4\x2e\xde\x46\xb6\x33\xd5\x9d\x02\x9f\xa2\x66\xb3\xef\x27\x7d\x8f\x27\xa0\x9a\xb2\xec\x1b\xdf\xf3\x61\x69\x71\xa0\xa0\x46\xbe\x6d\x8e\x03\x81\x7e\x65\x6e\x44\xd2\x4f\x4d\x37\x2e\xfd\x47\x57\x0b\x6c\x79\x1c\x52\x42\xf3\x8a\xcc\x5e\x93\x43\x46\xda\x1d\xa6\x45\xa7\xa7\x09\x7e\xc5\xba\x6c\xcf\x30\x5e\x5f\x04\xa0\xcb\xb0\x1f\xd0\x9d\xae\xdd\x23\xb2\xec\x3e\x78\x26\x3a\xa8\xf6\xf6\xcd\x7b\xbd\xe7\xec\xe4\x68\xf6\xe0\x5f\x0e\x76\x97\x55\xd1\x38\x43\xcf\x54\x71\x6c\x99\x41\xfe\xdb\x2c\xbd\x3e\xb9\x5c\x85\xdf\x0e\x04\x0f\xc2\x9b\xbf\x08\x0c\x39\x01\x5f\x06\xcd\x51\x56\xab\x4b\x64\xbf\x18\xe9\xf0\x27\xa9\x30\xc3\x17\xb6\xd2\x4b\x67\xe8\x2d\x9c\xe5\x7d\xfa\xee\xaf\xcd\x7b\x14\xdc\x37\x6f\xe1\xff\xd2\x83\x7f\x63\xbf\x0b\xf7\x85\xd7\xed\xdb\x0d\xf8\x2f\x3c\xf6\x7f\x08\x84\xbe\x5d\xfa\x47\x00\x00\x00\xff\xff\x43\xe4\x02\xdc\x50\x08\x00\x00")

func tmplCsharpServerGocsBytes() ([]byte, error) {
	return bindataRead(
		_tmplCsharpServerGocs,
		"tmpl/csharp/server.gocs",
	)
}

func tmplCsharpServerGocs() (*asset, error) {
	bytes, err := tmplCsharpServerGocsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/csharp/server.gocs", size: 2128, mode: os.FileMode(420), modTime: time.Unix(1467776752, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplGolangServerGogo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x58\x5f\x8f\xe2\x36\x10\x7f\x4e\x3e\x85\x1b\x5d\x7b\x09\x07\x46\x7b\x8f\x48\xfb\xd0\xbd\xab\xd4\x55\x75\xec\x76\xd9\x6a\x1f\x56\xfb\x10\x92\x01\xdc\x4d\x6c\x6a\x3b\x87\x68\xc4\x77\xef\x8c\x1d\x68\x80\xa8\xec\x5e\xff\x4b\x20\x91\xc4\xe3\xf1\xfc\xf7\x6f\x9c\xd4\x75\x0e\x33\x21\x81\x45\x06\xf4\x67\xd0\x11\x1b\x6c\x36\xe1\x32\xcd\x9e\xd3\x39\xb0\xba\xe6\xe3\xb4\x04\x83\x63\x40\x72\x5d\xbf\x21\x2e\x91\x01\x51\xd9\xe8\x92\xf1\x89\x1f\x3b\x36\xe4\x10\xe5\x52\x69\xcb\xe2\x30\x88\xa6\x6b\x0b\x26\xc2\x87\x42\xcd\xa3\x10\xef\x73\x61\x17\xd5\x94\x67\xaa\x1c\x3e\x54\x9f\x85\xb1\xc3\xb9\x1a\xd8\x85\x16\x33\x3b\xf4\xb7\x68\x9f\x0b\x7e\x9d\x56\x6b\xbc\xea\x65\xe6\xaf\x9d\xf3\xc6\xa6\xd6\xe4\x07\x53\x12\x69\x03\xa1\xdc\x3d\x0a\x93\x30\xb4\xeb\x25\xb0\x7b\xa7\x65\x8c\xb4\x7d\x4f\x36\x9b\x89\x73\x9e\x19\xab\xab\xcc\xb2\x3a\x0c\x1a\x02\xfe\x7a\xdd\xbc\x61\xf0\x41\x49\xc9\xdc\xaf\x47\x6a\x38\x8d\xc3\xe0\xa3\xd0\x90\xd9\x1f\x60\x4d\xc2\x84\x9c\x23\x25\x85\x52\x39\xce\x9e\xf3\x82\x7b\x42\xb8\x09\xc3\x59\x25\x33\x16\x1b\xd6\x3b\x65\x59\xc2\x94\xfc\x64\xe6\x71\x69\xe6\x8d\x36\x1c\x25\x68\x68\x5d\x0f\x98\x98\x31\xfe\x7d\x6a\xc6\x4a\x97\x69\x81\xf4\x4f\x60\x17\x2a\xc7\x6c\x04\x9a\x72\xe4\x63\xcb\xc7\xb0\xfa\xa0\x4a\xcc\xa4\xbd\xd5\xca\xaa\x4c\x15\x77\x90\xe6\xa0\x63\x97\x28\x9a\x6e\xc6\xa8\x03\x4d\xb4\x69\x82\x61\x0b\xcc\x4a\xd8\x6c\xc1\x88\x36\xa9\xa6\x3f\x83\x8b\x0e\x29\xd5\xa9\xc4\x02\x79\x53\x3a\x5d\x7b\xa5\xe0\xd5\x1b\x57\x2f\xce\xb8\x9f\xac\x28\x0c\xbf\xde\x1a\xe8\x57\x34\x2b\xc9\xca\x2c\x35\x58\x7f\x87\x8e\x73\x24\x78\x9e\xa6\xb8\xa2\xd1\x56\xe0\x96\x7e\x23\x61\x95\xae\x49\x44\xb0\x24\x13\xbe\x39\x94\x71\x28\xe2\x0e\x7e\xa9\xc0\xd8\x9a\x56\x80\x6e\x47\xe7\x23\x64\x2a\x87\x89\xcb\x7f\xac\xfb\x6c\x99\x20\x0b\xaa\x22\xae\xaf\x2e\x99\x14\x05\x55\x45\x10\x60\x31\xf3\x5b\xcc\xab\x9d\xc5\xd1\xe3\xf8\xdb\xfb\xc9\xd3\xe0\xf1\xa4\xe5\x4f\x2c\x77\xe2\x49\x9a\xd2\x23\xf6\xb5\x89\xfa\xf4\x4c\x3a\xb6\xa6\x5c\x32\xc3\x7d\xae\x8f\x96\xc7\x7f\xb1\x31\xcd\x7c\xb7\x35\x78\xf1\x3b\x8a\x5f\xcb\x4c\xc7\xa7\xd3\x82\xfb\xad\x92\x36\x4a\x5c\x72\xa0\x30\xe0\xf2\x61\x2f\x28\xb8\x8d\xa4\xb1\x5a\xc5\x54\x4c\x5f\x90\x25\x0d\xe6\x85\x6b\xcc\x52\x49\x03\xff\xbb\xd4\xf6\x19\xba\xf8\xcf\xe6\x77\x5a\xcd\x5c\x4c\xfd\xc6\xbf\xaa\x66\x33\xd0\x2e\x6e\xab\x3f\x84\x8b\x07\x2d\x2c\xc1\x45\x35\x23\x49\x0d\xdb\x77\xb2\x15\xdc\xd5\xce\x19\x8f\x86\xfc\xb6\x9a\x16\xc2\x2c\x1c\xa4\xdc\xc1\xb2\x58\xf7\x19\x2e\xe7\x57\xa4\x38\x76\xf8\x12\xd8\xf7\x47\x85\xb2\xab\xc0\x7b\x51\x22\x82\xbe\xa4\x06\xad\xe3\x44\x3f\xed\x05\xfe\xdf\x37\xc5\x28\xf3\x06\x84\x0e\x9f\x82\xf6\x00\x63\xb2\x07\x54\x08\xa5\x1e\xc4\x1b\xa4\xda\x02\xdb\xe6\xb5\x80\xed\xa5\x1c\x63\xf6\x9f\x86\xe5\xe0\x19\xd6\x05\x48\x92\x82\xb7\xd8\xf0\x5d\xd3\x49\xba\x10\xfb\xd1\xb3\xbf\xbb\x18\x3d\x7d\x39\x78\xef\x85\xe4\x0c\xde\x67\xf0\x3e\x83\xf7\x19\xbc\xff\x2d\xf0\x7e\x1d\x12\x4f\xc0\xee\x00\x32\x7e\xde\x9d\xcc\x1d\x14\xb7\xb0\x13\x53\x8d\x93\x8e\xe4\x0e\xe8\x04\x9f\x26\xd3\x62\x0a\xb4\xe8\x5d\xc4\x8f\x3c\xe9\xa1\xcd\x86\x6f\x81\x3e\x09\xdb\x56\xbe\xae\x55\x5c\x69\x95\xe6\x08\xa5\x1d\xdd\xa2\x75\xc2\xdf\x71\xfd\x57\x4f\xf8\x07\x06\x1e\xf7\x89\x1b\x79\x1c\xc5\x8e\x56\x71\x6e\x09\x7f\x5b\x4b\x78\x49\x06\xf6\xbb\xc2\x89\xb3\x93\xab\x73\xac\xad\xee\xe2\x8e\x45\xb9\x44\xef\x0e\xe6\xfa\x2c\xa3\x97\xe7\xdf\xdf\x9b\xfb\xac\x14\x79\x5e\xe0\x89\x80\x7a\x06\xe7\xdc\xbf\x29\xd3\xcb\xec\x8e\x9e\x9c\xde\x4a\x14\xc6\xdc\xbf\x6e\x63\x29\x78\x19\x68\x9a\xdf\xcf\x0f\xc2\x2e\x48\x57\x9c\x1d\x2a\x44\x7d\x6e\x27\x74\xd6\x9c\x97\x5c\x5f\xa3\x1f\x50\x82\xc4\x58\x0a\x25\x47\x8c\xfc\xa2\xe8\xfa\xcf\x26\x6e\xe5\x29\xeb\x28\xc7\xfe\x69\xc4\x4c\x1f\x07\x64\xcd\x88\x31\x17\x0c\x1a\x7b\x3b\x47\xcc\xbb\xd0\x0f\x5d\xfa\x86\x43\x96\x16\x05\x9b\x6e\xb7\x16\x2b\xc1\x98\x74\x8e\x61\x32\x0b\x55\x15\x39\x9b\x02\xab\x24\x6e\x6b\x26\xb7\x9f\x6a\xd8\xdb\x1b\xf9\x76\x1b\x89\x16\x8c\x75\x26\xdf\x81\x98\x2f\xd4\x16\x0e\x25\xbb\xe5\x3f\x56\x50\x41\x4b\x46\xa7\x80\xc8\x7f\x9f\x69\x49\x22\xf4\x42\xeb\x35\xd8\x4a\xcb\x86\xbc\x07\x90\xbf\x05\x00\x00\xff\xff\xd2\x50\x7d\xcd\x7a\x12\x00\x00")

func tmplGolangServerGogoBytes() ([]byte, error) {
	return bindataRead(
		_tmplGolangServerGogo,
		"tmpl/golang/server.gogo",
	)
}

func tmplGolangServerGogo() (*asset, error) {
	bytes, err := tmplGolangServerGogoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/golang/server.gogo", size: 4730, mode: os.FileMode(420), modTime: time.Unix(1467777485, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/.DS_Store": tmplDs_store,
	"tmpl/csharp/server.gocs": tmplCsharpServerGocs,
	"tmpl/golang/server.gogo": tmplGolangServerGogo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		".DS_Store": &bintree{tmplDs_store, map[string]*bintree{}},
		"csharp": &bintree{nil, map[string]*bintree{
			"server.gocs": &bintree{tmplCsharpServerGocs, map[string]*bintree{}},
		}},
		"golang": &bintree{nil, map[string]*bintree{
			"server.gogo": &bintree{tmplGolangServerGogo, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

