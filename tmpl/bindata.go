// Code generated by go-bindata.
// sources:
// tmpl/csharp/server.gocs
// tmpl/golang/server.gogo
// DO NOT EDIT!

package tmpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplCsharpServerGocs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x54\xdf\x6f\xdb\x36\x10\x7e\x96\xfe\x8a\x83\x11\x60\x52\xe0\x32\x7b\xae\xd1\x87\x34\x0d\xb6\x00\x4b\x53\xd4\x1e\x06\xec\xa5\xa0\xa9\xb3\xcd\x8d\x22\x05\x92\x72\xa3\x1a\xfa\xdf\x77\xa4\x28\x3b\xfe\xb1\xae\x1b\x30\x6c\x41\x90\x88\x77\xdf\x7d\x1f\xef\x17\x77\xbb\x2b\x5f\x37\xaa\xe2\x9e\xc3\xeb\x37\xc0\xe0\x55\xdf\xe7\x37\xd7\xd7\x39\x5c\xc3\x62\x23\x1d\xac\xa4\x42\xa0\xff\xbc\xf5\x66\x8d\x1a\x2d\xf7\x58\xc1\xb2\x03\xfc\x62\x1b\x11\x60\xef\x8c\xfe\xce\x83\xd8\x70\xbd\x46\xa8\xb9\x6e\xb9\x52\x1d\x39\x6e\xf2\xbc\x75\x52\xaf\x61\xde\x39\x8f\xf5\xec\xe8\xc4\xee\x8c\x52\x28\xbc\x34\xda\xfd\xb9\x87\xfd\x10\x14\xa5\x38\x41\x2c\xf0\xd9\x9f\x98\x1e\x9e\x46\xc3\x62\x63\xe5\xca\x1f\x9f\xbe\xa2\xf6\xb1\xd5\x5e\xd6\xc8\xe6\xa4\xc3\x95\xfc\xc2\x03\xe8\x24\xfa\x83\x35\xde\x08\xa3\x4e\xcc\x0b\xcb\xb5\x6b\x8c\xdd\x8b\xbd\xbf\x5d\xcc\xd9\x9d\x92\xa8\xc9\x94\x6b\x5e\xa3\x6b\xb8\x40\xd8\xed\xd8\xfb\xf1\xd0\xf7\xb0\xcb\x33\xe7\x49\x47\x80\x50\xdc\xb9\xe0\x26\xf5\xad\x14\x18\x61\x7d\x9f\x4e\x01\x98\xdd\xdc\x00\xc9\x0b\x74\xce\xd8\xd0\x87\xa3\x1e\xa4\x83\xb1\x04\x6c\xac\xdc\x92\x1d\x12\xf5\x21\xa8\x19\xbf\x3e\xcd\xce\x61\x0f\x77\x46\xeb\xa1\x32\x20\xe8\x93\x30\x01\xd4\x2e\x15\x39\x13\x66\x6b\x64\x05\x52\x4b\x5f\x5c\x20\x9d\x1e\x53\x94\xf1\xd2\xd9\x41\x13\xde\x1c\xb0\x41\x3f\x8b\x2a\x64\x15\x51\x29\x13\x6c\xde\x2e\x9d\xb0\x72\x89\xb7\xae\xd3\xa2\x98\x3c\x69\x76\x56\x11\x76\x3d\x99\x82\xd1\x6f\xad\xe1\x95\xe0\xce\x97\xb3\xcb\xb1\x97\x03\x27\x71\x56\x23\xc3\xa3\x5b\xc7\xd8\x3e\x3f\xaf\x45\xcc\x33\x42\x0a\xb3\xfc\x8d\x32\x02\x87\xba\x42\x4a\x91\x4c\x3f\x72\x5d\x29\xb4\xf7\x5b\x6a\xee\xad\x5d\x3b\xc0\x94\xea\x96\x5b\xf0\x61\x12\x28\x27\x8d\x9f\xcf\x86\x83\x2d\x1e\xb1\x36\xb6\x7b\xdb\xae\x56\x68\x0b\x64\x8f\x54\x0b\xbe\x46\xf6\x8e\x76\x6e\xc8\x23\x50\x48\xaa\x92\x4f\x14\xf7\xbf\xc6\x89\x2b\x22\x6d\x39\x03\x9a\x01\xa9\x03\xd0\xdb\x6e\x10\x85\xec\x88\x15\x96\xed\x2a\x32\x01\xfd\xa4\x68\x30\x81\x71\x6f\xa5\x14\xa0\x76\xeb\xa1\xe8\x99\xfb\x2c\xbd\xd8\xc0\x8b\xdb\x50\x25\x43\xca\x29\xa9\x6c\xb7\x7b\x05\x36\x6e\xf4\x55\x98\xe3\x29\x5c\xd5\xe8\x37\xa6\x8a\x8f\xc4\x58\xe2\xc7\x68\x72\xf4\x62\x8c\x21\x72\x05\x9a\xd2\x28\x7e\xf6\x52\x39\xf6\xe0\xf6\x0d\x1b\xa0\x23\x4b\x99\x42\xc8\x83\x30\x79\xf1\x06\x9d\x76\x8f\x5c\x3a\x7e\x4d\x5e\xc7\x80\x51\x24\xf1\xb0\x27\x2a\x17\xef\x12\xdb\x8b\xa9\x3b\x04\x7e\x4a\x33\x5b\x7c\x3f\x1d\x6a\x3c\x05\xdd\x2a\x35\x14\x7e\xe0\x43\xe5\x70\xa4\xa0\x42\x7e\x5b\x1f\x47\x02\x73\xa1\x6f\x44\x32\x74\xcd\xb4\x3e\xff\x5b\x57\x8b\x6c\x65\x6a\x52\x46\xfd\x4a\xcc\x61\x26\x47\x45\xb2\x8e\xdd\x22\xef\xa1\x83\x1f\xb1\x51\xdd\x0b\x4c\x98\x2f\x02\xd0\x65\xe8\x19\xf5\x87\x6b\x0f\x88\xa2\x78\x88\x3b\x93\x36\xa8\x09\xeb\x5b\x0e\xf3\x5e\xb2\xc3\x46\xb3\x0f\xe1\x29\x70\x9b\xa2\x4e\x8b\x33\xd6\x4c\x57\xfb\x92\x59\xe4\xbf\xcf\xf2\x73\xcf\xf1\x29\xfe\xed\x41\xf0\x38\x78\xf7\xcf\x02\xa3\x26\xe0\xf3\x38\x73\xa4\xea\x8c\x42\xf6\x8b\x95\x1e\x7f\x92\x1a\x0b\x7c\x66\x0b\x33\xf7\x96\x1e\xd7\xa2\x1c\xe4\xfb\xaf\x2f\xef\x7e\xe0\xfe\xf7\x2b\xfc\x6f\xee\xe0\x5f\xac\xdf\xd1\xf6\xc5\xe7\xf6\xdb\x17\xf0\x1f\xec\xd8\x7f\x31\x20\xf4\xdb\xe7\x7f\x04\x00\x00\xff\xff\x84\x98\xb1\x5d\xdd\x08\x00\x00")

func tmplCsharpServerGocsBytes() ([]byte, error) {
	return bindataRead(
		_tmplCsharpServerGocs,
		"tmpl/csharp/server.gocs",
	)
}

func tmplCsharpServerGocs() (*asset, error) {
	bytes, err := tmplCsharpServerGocsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/csharp/server.gocs", size: 2269, mode: os.FileMode(420), modTime: time.Unix(1461240220, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplGolangServerGogo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x57\x5f\x6f\xdb\x36\x10\x7f\x96\x3e\xc5\x4d\x28\x56\x29\x75\x64\xa4\x8f\x06\xf2\x92\x66\xc0\x82\xa1\x4e\x17\x77\xe8\xc3\xb0\x07\x49\x3e\xdb\x5c\x24\xd2\xe3\x9f\x1a\xae\xe0\xef\xbe\x23\x29\x79\x96\x2c\xcc\x76\x07\x14\x43\x11\x03\xad\x44\xf2\x78\x7f\x7e\x77\xf7\x8b\xae\xae\xe7\xb8\x60\x1c\x21\x52\x28\x3f\xa3\x8c\xe0\x7a\xb7\x0b\xd7\x59\xf1\x9c\x2d\x11\xea\x3a\x9d\x66\x15\x2a\x5a\x23\x6d\xd7\xf5\x2b\x2b\xc5\x0a\xb4\xbb\x30\xb9\x85\x74\xe6\xd7\x4e\x8c\x24\x58\xb5\x16\x52\x43\x1c\x06\x51\xbe\xd5\xa8\xa2\x90\xde\x96\x4c\xaf\x4c\x9e\x16\xa2\x1a\xf3\x4c\xab\x6b\x26\xdc\x33\xea\x1e\x7d\x32\x9f\x99\xd2\xe3\xa5\xb8\xd6\x2b\xc9\x16\x7a\xec\x1f\x3d\x29\xfc\x92\x9b\xed\x58\x69\xba\x3f\x8f\xc2\x24\x0c\xf5\x76\x8d\xf0\xd1\x89\x4e\x69\xb3\xeb\xe2\x6e\x37\x73\x51\x81\xd2\xd2\x14\x1a\xea\x30\x68\x36\xe8\x77\x35\x2c\x1b\x06\xef\x04\xe7\xe0\x7e\x57\xd6\xcf\xd4\xae\xc3\xe0\x9e\x49\x2c\xf4\x2f\xb8\xb5\xca\x18\x5f\x86\xbb\x30\x5c\x18\x5e\x40\xac\xe0\xea\x94\x03\x09\x08\xfe\x5e\x2d\xe3\x4a\x2d\x1b\xa5\xb4\x4a\xc8\x9f\xba\xbe\x06\xb6\x80\xf4\xe7\x4c\x4d\x85\xac\xb2\x92\xf6\xdf\xa3\x5e\x89\x39\xa1\x19\x48\x8b\xb1\xc7\x21\x9d\xe2\xe6\x9d\xa8\x28\x13\xfa\x83\x14\x5a\x14\xa2\x7c\xc2\x6c\x8e\x32\x76\x40\xdb\xe3\x66\x4d\x36\xd2\xfb\x4c\x67\x09\xa1\x13\xa8\x0d\xd3\xc5\x0a\xec\xde\xcc\xe4\x7f\xa2\x03\xc1\x1a\x95\x19\xa7\x04\xbf\xaa\x9c\xad\x4e\x2a\xbd\x79\xe5\xf2\xed\x9c\xfb\x4d\xb3\x52\xa5\x0f\xad\x83\xfe\x46\x73\xd3\x7a\x59\x64\x8a\xea\xa7\x1f\x78\x4a\x1b\x5e\xa6\x29\x8e\x68\xd2\x2a\x6c\xf7\x1f\x39\x6e\xb2\xad\x55\x11\xac\xad\x0b\x3f\xf6\x75\xf4\x55\x3c\xe1\x5f\x06\x95\xae\xed\x0d\x94\x87\xe8\xdc\x63\x21\xe6\x38\x73\x69\x8e\xe5\x08\xd6\x09\x89\x90\x29\x2b\xf5\xc3\x2d\x70\x56\xda\xe4\x93\x1d\x4a\x9d\x2e\x79\x4c\xfb\x56\xa2\x55\x74\x0b\x2a\xf5\x99\x3a\x72\x3b\x3e\x5b\x15\xfd\xe7\x0b\x33\x7d\xe0\x85\x8c\x4f\x23\x42\x15\x6d\xb8\x8e\x12\x87\x0b\x96\x0a\x1d\x14\xfa\xc6\xc6\xd5\x68\x9a\x8a\x4d\x6c\xf3\xf8\x15\x00\x49\x54\x67\xde\x51\x6b\xc1\x15\x7e\x63\x54\x47\x40\x0e\x5e\x00\x6d\x6e\x16\x2e\x1c\x5f\xee\x77\x66\xb1\x40\xe9\x5c\xde\xfc\x6b\x93\x7c\x92\x4c\xdb\x26\x31\x0b\xab\xa9\x11\xfb\x89\x1f\xc4\xb5\xd9\x7b\xe2\x5b\x3d\xfd\x60\xf2\x92\xa9\x95\x6b\xa4\x27\x5c\x97\xdb\x11\xd0\xf5\xf4\xce\x1a\x8e\x5d\x57\x05\xfa\xed\x51\x8e\xf6\xc9\xff\xc8\x2a\xa2\x87\x73\xd2\xaf\x9d\x64\x34\x02\x7d\x43\xff\xde\x36\x75\xc0\xe7\x4d\xeb\xf5\xdf\x82\xc3\x05\x61\xd2\x69\x4f\x22\x10\xcf\x50\x4d\x7f\xb6\xed\xbc\xbb\x94\xa6\xbc\x96\x63\xa6\xfa\xcf\x64\x14\x3c\xe3\xb6\x44\x6e\xb5\xd0\x23\x56\xe9\x9e\x51\x93\x21\x9e\xfa\xdd\x8b\xbf\xb9\x99\xfc\xf1\xf5\x94\xd5\x81\xe4\x85\xb2\x5e\x28\xeb\x85\xb2\xbe\x35\x65\x5d\xc6\x3f\x33\xd4\x7b\x5a\x88\x9f\xf7\x1f\x5b\x8e\x80\x0e\x18\x83\xf2\x44\x87\x61\x1b\x3e\x51\x86\x2a\x24\xcb\xd1\x5d\x79\x03\x51\x7a\x14\xc9\x15\xf9\x6c\xfd\x18\x20\xb6\x60\x29\x28\xeb\x87\xcc\x47\xd0\xec\x92\xf0\x30\x90\xcb\x38\xf4\x4e\x8a\x6c\x4e\x1c\x33\x40\xa3\x07\x1f\x7c\x7b\xa9\xff\xeb\x07\x5f\xcf\xc1\x63\x02\x7d\xe4\xc7\x40\x0f\x70\xe8\xf7\xc9\x95\xe7\x04\xdf\xa5\xcb\x13\x7f\xcf\x5d\x89\x51\x5a\x87\xeb\x2a\xa6\xd9\x8a\x5c\xeb\x9d\x8d\xa0\xb0\xd3\xca\x3f\x83\x4a\x72\xba\x42\x5d\x2f\x0d\x26\xc4\x9f\xd7\x0f\x64\x09\x2b\xe4\x14\x2d\x13\x7c\x02\xd6\xb2\x8d\xdf\x8f\x88\xee\xe6\x29\x1b\x16\x42\xff\x36\x01\x35\xa2\x85\xf5\x6d\x42\x23\x95\x75\x77\x14\x3a\x38\xc7\x63\xc8\xca\x12\xf2\xb6\xca\x80\x26\x4d\x45\x63\xa7\x02\xb5\x12\xa6\x9c\x43\x8e\x60\x38\x55\x38\xf0\x76\x08\x85\xd7\x8f\xfc\x75\xeb\x48\xbf\xf7\x07\x33\x72\xaa\xef\xbd\xa6\x5e\xcb\xfa\xfe\xef\x98\xf9\xd5\xa0\xc1\x03\x5b\x83\x86\x22\xfc\x22\xd7\xc5\x99\x16\x9b\x79\xd0\xdb\xa2\xd6\x47\x6d\x24\x6f\x8e\x3b\xdc\xf3\x77\x00\x00\x00\xff\xff\xa6\xc0\x0a\xac\xa4\x0f\x00\x00")

func tmplGolangServerGogoBytes() ([]byte, error) {
	return bindataRead(
		_tmplGolangServerGogo,
		"tmpl/golang/server.gogo",
	)
}

func tmplGolangServerGogo() (*asset, error) {
	bytes, err := tmplGolangServerGogoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/golang/server.gogo", size: 4004, mode: os.FileMode(420), modTime: time.Unix(1462856402, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/csharp/server.gocs": tmplCsharpServerGocs,
	"tmpl/golang/server.gogo": tmplGolangServerGogo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"csharp": &bintree{nil, map[string]*bintree{
			"server.gocs": &bintree{tmplCsharpServerGocs, map[string]*bintree{}},
		}},
		"golang": &bintree{nil, map[string]*bintree{
			"server.gogo": &bintree{tmplGolangServerGogo, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

