// Code generated by go-bindata.
// sources:
// tmpl/csharp/server.gocs
// tmpl/golang/server.gogo
// DO NOT EDIT!

package tmpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplCsharpServerGocs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x54\xdf\x8b\xe3\x36\x10\x7e\xb6\xff\x8a\x21\x2c\xd4\x0e\x39\xa5\xcf\x17\xee\x61\x6f\x2f\xb4\x0b\xcd\xdd\x72\x49\x29\xec\xcb\xa2\xc8\x93\x44\xad\x2d\x19\x49\xce\xae\x1b\xfc\xbf\x77\x24\xcb\xf9\xd1\x2c\xed\xb6\x50\x7a\x21\x24\x96\xf4\xcd\x37\x9a\x99\xef\xf3\xe1\x70\xe3\xaa\xba\x2c\xb8\xe3\xf0\xfe\x03\x30\x78\xd7\x75\xe9\x74\x3c\x4e\x61\x0c\xab\x9d\xb4\xb0\x91\x25\x02\xfd\xf3\xc6\xe9\x2d\x2a\x34\xdc\x61\x01\xeb\x16\xf0\x77\x53\x0b\x0f\xfb\xa4\xd5\x77\x0e\xc4\x8e\xab\x2d\x42\xc5\x55\xc3\xcb\xb2\xa5\x83\x69\x9a\x36\x56\xaa\x2d\xcc\x1f\xbf\x3e\xdc\xb1\xcf\xdc\xd9\x59\xdc\xf9\x7c\xbb\x5a\xb2\xbb\x52\xa2\x72\xc3\xd6\xb2\xb5\x0e\xab\x61\xb5\xda\x19\xb9\x71\x6c\x65\xb8\xb2\xb5\x36\x84\x4a\x15\xaf\xd0\xd6\x5c\x20\x1c\x0e\x44\x16\x17\x5d\x07\x87\x34\xb1\x8e\x3b\x29\x40\x94\xdc\x5a\x7f\xbc\x44\xb3\x97\x02\x03\xac\xeb\xe2\xca\x03\x93\xe9\x14\x1e\x8c\x16\x68\xad\x36\xbe\xac\x8b\x92\xe2\x42\x1b\x02\xd6\x46\xee\x69\x1f\x22\xf5\x15\x29\x3b\xd1\xd4\xc3\xd3\xd3\xec\x3a\xf0\xfe\x4e\x2b\x85\xc2\x49\xad\x40\xd0\x23\x61\x3c\xa8\x59\x97\x74\x18\x31\x7b\x2d\x0b\x90\x4a\xba\xec\x4d\x69\x26\x97\xa4\x79\x28\x2c\x39\xdd\x02\x3e\x9c\xb0\xfe\x46\x49\xc8\x4b\xbb\x22\xe4\x4e\x04\x5b\x36\x6b\x2b\x8c\x5c\xe3\xad\x6d\x95\xc8\x46\x5f\x14\xbb\xce\x3c\x1e\x4d\x40\xab\x8f\x46\xf3\x42\x70\xeb\xf2\xd9\xeb\xb1\xaf\x07\x8e\x82\x3c\x02\xc3\xc2\x6e\x43\x6c\x97\x5e\x77\x27\x54\x1e\x20\x99\x5e\xff\x4a\x15\x81\x45\x55\x20\x95\x48\x5b\x3f\x72\x55\x94\x68\xe6\x7b\x92\xc9\xad\xd9\x5a\xc0\x58\xea\x9e\x1b\x70\x5e\x1a\x54\x93\xc2\xe7\x2b\xb5\xb0\xd5\x02\x2b\x6d\xda\x8f\xcd\x66\x83\x26\x43\xb6\xa0\x5e\xf0\x2d\xb2\x4f\x24\xf3\xbe\x0e\x4f\x21\xa9\x4b\x2e\x52\xcc\x1f\xa9\xd1\x4e\x67\x81\x36\x9f\x01\xe9\x44\x2a\x0f\x74\xa6\xed\x93\x42\x72\xc1\x0a\xeb\x66\x13\x98\x80\x3e\x31\x1a\xb4\x67\x3c\xee\x52\x09\x50\xd9\x6d\xdf\xf4\xc4\x3e\x4b\x27\x76\x70\x76\x1b\xea\xa4\x2f\x39\x16\x95\x1c\x0e\xef\xc0\x04\x13\xdd\x78\xad\x4f\xe0\xa6\x42\xb7\xd3\x45\xf0\xe5\xd0\xe2\x45\xd8\xb2\x64\xd2\x21\x44\x6e\x40\x51\x19\xd9\xcf\x4e\x96\x96\xdd\xdb\xe3\xc0\x7a\xe8\xc0\x92\xc7\x10\x3a\x41\x18\x9d\xd9\xfe\xcf\xd3\xa3\x23\x15\x9e\x46\xef\x43\xc0\x90\x24\xf2\xb0\x2f\xd4\x2e\xde\x46\xb6\x33\xd5\x9d\x02\x9f\xa2\x66\xb3\xef\x27\x7d\x8f\x27\xa0\x9a\xb2\xec\x1b\xdf\xf3\x61\x69\x71\xa0\xa0\x46\xbe\x6d\x8e\x03\x81\x7e\x65\x6e\x44\xd2\x4f\x4d\x37\x2e\xfd\x47\x57\x0b\x6c\x79\x1c\x52\x42\xf3\x8a\xcc\x5e\x93\x43\x46\xda\x1d\xa6\x45\xa7\xa7\x09\x7e\xc5\xba\x6c\xcf\x30\x5e\x5f\x04\xa0\xcb\xb0\x1f\xd0\x9d\xae\xdd\x23\xb2\xec\x3e\x78\x26\x3a\xa8\xf6\xf6\xcd\x7b\xbd\xe7\xec\xe4\x68\xf6\xe0\x5f\x0e\x76\x97\x55\xd1\x38\x43\xcf\x54\x71\x6c\x99\x41\xfe\xdb\x2c\xbd\x3e\xb9\x5c\x85\xdf\x0e\x04\x0f\xc2\x9b\xbf\x08\x0c\x39\x01\x5f\x06\xcd\x51\x56\xab\x4b\x64\xbf\x18\xe9\xf0\x27\xa9\x30\xc3\x17\xb6\xd2\x4b\x67\xe8\x2d\x9c\xe5\x7d\xfa\xee\xaf\xcd\x7b\x14\xdc\x37\x6f\xe1\xff\xd2\x83\x7f\x63\xbf\x0b\xf7\x85\xd7\xed\xdb\x0d\xf8\x2f\x3c\xf6\x7f\x08\x84\xbe\x5d\xfa\x47\x00\x00\x00\xff\xff\x43\xe4\x02\xdc\x50\x08\x00\x00")

func tmplCsharpServerGocsBytes() ([]byte, error) {
	return bindataRead(
		_tmplCsharpServerGocs,
		"tmpl/csharp/server.gocs",
	)
}

func tmplCsharpServerGocs() (*asset, error) {
	bytes, err := tmplCsharpServerGocsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/csharp/server.gocs", size: 2128, mode: os.FileMode(420), modTime: time.Unix(1463045712, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplGolangServerGogo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x57\x5f\x6f\xdb\x36\x10\x7f\x96\x3e\xc5\x4d\x28\x56\x29\x75\x64\xa4\x8f\x06\xf2\x92\x66\xc0\x82\xa1\x4e\x17\x77\xe8\xc3\xb0\x07\x49\x3e\xdb\x5c\x24\xd2\xe3\x9f\x1a\xae\xe0\xef\xbe\x23\x29\x79\x96\x2c\xcc\x76\x07\x14\x43\x11\x03\xad\x44\xf2\x78\x7f\x7e\x77\xf7\x8b\xae\xae\xe7\xb8\x60\x1c\x21\x52\x28\x3f\xa3\x8c\xe0\x7a\xb7\x0b\xd7\x59\xf1\x9c\x2d\x11\xea\x3a\x9d\x66\x15\x2a\x5a\x23\x6d\xd7\xf5\x2b\x2b\xc5\x0a\xb4\xbb\x30\xb9\x85\x74\xe6\xd7\x4e\x8c\x24\x58\xb5\x16\x52\x43\x1c\x06\x51\xbe\xd5\xa8\xa2\x90\xde\x96\x4c\xaf\x4c\x9e\x16\xa2\x1a\xf3\x4c\xab\x6b\x26\xdc\x33\xea\x1e\x7d\x32\x9f\x99\xd2\xe3\xa5\xb8\xd6\x2b\xc9\x16\x7a\xec\x1f\x3d\x29\xfc\x92\x9b\xed\x58\x69\xba\x3f\x8f\xc2\x24\x0c\xf5\x76\x8d\xf0\xd1\x89\x4e\x69\xb3\xeb\xe2\x6e\x37\x73\x51\x81\xd2\xd2\x14\x1a\xea\x30\x68\x36\xe8\x77\x35\x2c\x1b\x06\xef\x04\xe7\xe0\x7e\x57\xd6\xcf\xd4\xae\xc3\xe0\x9e\x49\x2c\xf4\x2f\xb8\xb5\xca\x18\x5f\x86\xbb\x30\x5c\x18\x5e\x40\xac\xe0\xea\x94\x03\x09\x08\xfe\x5e\x2d\xe3\x4a\x2d\x1b\xa5\xb4\x4a\xc8\x9f\xba\xbe\x06\xb6\x80\xf4\xe7\x4c\x4d\x85\xac\xb2\x92\xf6\xdf\xa3\x5e\x89\x39\xa1\x19\x48\x8b\xb1\xc7\x21\x9d\xe2\xe6\x9d\xa8\x28\x13\xfa\x83\x14\x5a\x14\xa2\x7c\xc2\x6c\x8e\x32\x76\x40\xdb\xe3\x66\x4d\x36\xd2\xfb\x4c\x67\x09\xa1\x13\xa8\x0d\xd3\xc5\x0a\xec\xde\xcc\xe4\x7f\xa2\x03\xc1\x1a\x95\x19\xa7\x04\xbf\xaa\x9c\xad\x4e\x2a\xbd\x79\xe5\xf2\xed\x9c\xfb\x4d\xb3\x52\xa5\x0f\xad\x83\xfe\x46\x73\xd3\x7a\x59\x64\x8a\xea\xa7\x1f\x78\x4a\x1b\x5e\xa6\x29\x8e\x68\xd2\x2a\x6c\xf7\x1f\x39\x6e\xb2\xad\x55\x11\xac\xad\x0b\x3f\xf6\x75\xf4\x55\x3c\xe1\x5f\x06\x95\xae\xed\x0d\x94\x87\xe8\xdc\x63\x21\xe6\x38\x73\x69\x8e\xe5\x08\xd6\x09\x89\x90\x29\x2b\xf5\xc3\x2d\x70\x56\xda\xe4\x93\x1d\x4a\x9d\x2e\x79\x4c\xfb\x56\xa2\x55\x74\x0b\x2a\xf5\x99\x3a\x72\x3b\x3e\x5b\x15\xfd\xe7\x0b\x33\x7d\xe0\x85\x8c\x4f\x23\x42\x15\x6d\xb8\x8e\x12\x87\x0b\x96\x0a\x1d\x14\xfa\xc6\xc6\xd5\x68\x9a\x8a\x4d\x6c\xf3\xf8\x15\x00\x49\x54\x67\xde\x51\x6b\xc1\x15\x7e\x63\x54\x47\x40\x0e\x5e\x00\x6d\x6e\x16\x2e\x1c\x5f\xee\x77\x66\xb1\x40\xe9\x5c\xde\xfc\x6b\x93\x7c\x92\x4c\xdb\x26\x31\x0b\xab\xa9\x11\xfb\x89\x1f\xc4\xb5\xd9\x7b\xe2\x5b\x3d\xfd\x60\xf2\x92\xa9\x95\x6b\xa4\x27\x5c\x97\xdb\x11\xd0\xf5\xf4\xce\x1a\x8e\x5d\x57\x05\xfa\xed\x51\x8e\xf6\xc9\xff\xc8\x2a\xa2\x87\x73\xd2\xaf\x9d\x64\x34\x02\x7d\x43\xff\xde\x36\x75\xc0\xe7\x4d\xeb\xf5\xdf\x82\xc3\x05\x61\xd2\x69\x4f\x22\x10\xcf\x50\x4d\x7f\xb6\xed\xbc\xbb\x94\xa6\xbc\x96\x63\xa6\xfa\xcf\x64\x14\x3c\xe3\xb6\x44\x6e\xb5\xd0\x23\x56\xe9\x9e\x51\x93\x21\x9e\xfa\xdd\x8b\xbf\xb9\x99\xfc\xf1\xf5\x94\xd5\x81\xe4\x85\xb2\x5e\x28\xeb\x85\xb2\xbe\x35\x65\x5d\xc6\x3f\x33\xd4\x7b\x5a\x88\x9f\xf7\x1f\x5b\x8e\x80\x0e\x18\x83\xf2\x44\x87\x61\x1b\x3e\x51\x86\x2a\x24\xcb\xd1\x5d\x79\x03\x51\x7a\x14\xc9\x15\xf9\x6c\xfd\x18\x20\xb6\x60\x29\x28\xeb\x87\xcc\x47\xd0\xec\x92\xf0\x30\x90\xcb\x38\xf4\x4e\x8a\x6c\x4e\x1c\x33\x40\xa3\x07\x1f\x7c\x7b\xa9\xff\xeb\x07\x5f\xcf\xc1\x63\x02\x7d\xe4\xc7\x40\x0f\x70\xe8\xf7\xc9\x95\xe7\x04\xdf\xa5\xcb\x13\x7f\xcf\x5d\x89\x51\x5a\x87\xeb\x2a\xa6\xd9\x8a\x5c\xeb\x9d\x8d\xa0\xb0\xd3\xca\x3f\x83\x4a\x72\xba\x42\x5d\x2f\x0d\x26\xc4\x9f\xd7\x0f\x64\x09\x2b\xe4\x14\x2d\x13\x7c\x02\xd6\xb2\x8d\xdf\x8f\x88\xee\xe6\x29\x1b\x16\x42\xff\x36\x01\x35\xa2\x85\xf5\x6d\x42\x23\x95\x75\x77\x14\x3a\x38\xc7\x63\xc8\xca\x12\xf2\xb6\xca\x80\x26\x4d\x45\x63\xa7\x02\xb5\x12\xa6\x9c\x43\x8e\x60\x38\x55\x38\xf0\x76\x08\x85\xd7\x8f\xfc\x75\xeb\x48\xbf\xf7\x07\x33\x72\xaa\xef\xbd\xa6\x5e\xcb\xfa\xfe\xef\x98\xf9\xd5\xa0\xc1\x03\x5b\x83\x86\x22\xfc\x22\xd7\xc5\x99\x16\x9b\x79\xd0\xdb\xa2\xd6\x47\x6d\x24\x6f\x8e\x3b\xdc\xf3\x77\x00\x00\x00\xff\xff\xa6\xc0\x0a\xac\xa4\x0f\x00\x00")

func tmplGolangServerGogoBytes() ([]byte, error) {
	return bindataRead(
		_tmplGolangServerGogo,
		"tmpl/golang/server.gogo",
	)
}

func tmplGolangServerGogo() (*asset, error) {
	bytes, err := tmplGolangServerGogoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/golang/server.gogo", size: 4004, mode: os.FileMode(420), modTime: time.Unix(1463045658, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/csharp/server.gocs": tmplCsharpServerGocs,
	"tmpl/golang/server.gogo": tmplGolangServerGogo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"csharp": &bintree{nil, map[string]*bintree{
			"server.gocs": &bintree{tmplCsharpServerGocs, map[string]*bintree{}},
		}},
		"golang": &bintree{nil, map[string]*bintree{
			"server.gogo": &bintree{tmplGolangServerGogo, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

