// Code generated by go-bindata.
// sources:
// tmpl/csharp/server.tmpl
// tmpl/golang/server.gogo
// DO NOT EDIT!

package tmpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplCsharpServerTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe4\x54\x4d\x6b\xc3\x38\x10\x3d\xc7\xbf\x42\x84\xc2\x3a\x21\x55\xf6\xdc\xd0\x43\xbf\xd8\x0d\x6c\xda\xd2\x04\x16\xf6\x52\x64\x79\x92\x68\x57\x96\x8c\x24\xa7\x71\x83\xff\xfb\x8e\x64\xbb\xce\x57\x4b\x7b\xda\xc3\x42\x20\xd6\xe8\xcd\x9b\xd1\xd3\x3c\xed\x76\x17\x2e\xcb\x65\xca\x1c\x23\x57\xd7\x84\x92\xcb\xaa\x8a\xc6\xc3\x61\x44\x86\x64\xb1\x16\x96\x2c\x85\x04\x82\xff\xac\x70\x7a\x05\x0a\x0c\x73\x90\x92\xa4\x24\xf0\x6e\x72\xee\x61\xf7\x5a\xfd\xe2\x08\x5f\x33\xb5\x02\x92\x31\x55\x30\x29\x4b\xdc\x18\x47\x51\x61\x85\x5a\x91\x79\x69\x1d\x64\x93\x83\x15\xbd\xd3\x52\x02\x77\x42\x2b\xfb\xf9\x0e\xfd\xcd\x57\x14\xfc\x08\xb1\x80\xad\x3b\x0a\x4d\x9f\xda\xc0\x62\x6d\xc4\xd2\x1d\xae\xbe\xa8\xf6\x52\x28\x27\x32\xa0\x73\xac\xc3\xa4\x78\x67\x1e\x74\x94\xfd\x6c\xb4\xd3\x5c\xcb\xa3\xf0\xc2\x30\x65\x73\x6d\x3e\x8a\x3d\xde\x2c\xe6\xf4\x4e\x0a\x50\x18\x8a\x14\xcb\xc0\xe6\x8c\x03\xd9\xed\xe8\x63\xbb\xa8\x2a\xb2\x8b\x7a\x5c\x32\x6b\x7d\x1c\xcb\x6e\x04\x87\xb0\x5f\x55\xcd\xca\x23\x7a\xe3\x31\xc1\xba\x1c\xac\xd5\xc6\x5f\xc0\x81\xf8\xcd\x42\x1b\x04\xe6\x46\x6c\x30\x4e\xac\xc3\xde\xf9\x5e\x52\xde\x7e\xbd\x4e\x4e\x61\xd3\x3b\xad\x54\x2d\x09\xe1\xf8\x89\x18\x0f\x2a\x12\x89\x9b\x0d\xe6\xb3\xfe\xe2\x33\x35\x46\x87\x8c\x83\x70\x86\x5e\xd7\x02\xb9\xee\xb0\xbe\x9d\x5e\x28\x8a\x51\x1e\x0a\xf7\x38\x9d\x17\x89\xe5\x46\x24\x70\x63\x4b\xc5\xe3\xfe\x93\xa2\x27\x0d\xd0\x61\x7f\x44\xb4\xba\x35\x9a\xa5\x9c\x59\x37\x98\x9c\xcf\x3d\x9f\xd8\x0f\x33\x1b\x18\x66\x76\x15\x72\xab\xe8\x54\x9a\x8d\x16\x69\x0d\x89\x75\xf2\x37\x9e\x88\x58\x50\x29\xe0\x11\x31\xf4\x3b\x53\xa9\x04\xf3\xb0\xc1\x4b\xbe\x31\x2b\x4b\xa0\x39\xea\x86\x19\xe2\xfc\x44\xe0\x99\x14\xbc\x9d\x0c\x09\x5d\xcc\x20\xd3\xa6\xbc\x2d\x96\x4b\x30\x31\xd0\x19\x6a\xc1\x56\x40\xef\xd1\x7b\xf5\x39\x3c\x85\x40\x95\x5c\x43\xf1\xf0\x57\x98\xbc\x38\xd0\x0e\x26\x04\x47\x42\x28\x0f\x74\xa6\xac\x8b\xf6\xec\x9b\x70\x7c\x4d\xf6\xe8\x50\x0a\xdf\x73\xd3\x55\x6f\xb7\xbb\x24\x26\x58\xf3\xc2\x0f\xe4\x88\x5c\x64\xe0\xd6\x3a\x0d\x6e\x6f\x35\x9a\x85\x90\x45\xeb\xb7\x29\x62\x49\x14\xf6\x11\x4f\xed\x87\xd6\x35\xa8\xcd\x1f\x34\x60\xdc\x01\xd2\xdf\x7b\x46\x8e\x85\xc7\x2d\x15\xbe\xfa\x57\x21\xa1\xa5\x6f\x78\xe8\x13\x9e\x94\x95\x0d\x5b\x37\x30\x5d\xde\x6b\x33\x6d\xf1\xaf\xa3\x5a\x9d\x11\x51\x85\x94\xb5\x64\x35\x1d\x48\x0b\x2d\x83\x17\x31\x29\x96\xdf\xbb\x85\x96\xc4\x27\xe9\x33\xca\x23\x51\xad\xbb\x2e\x5c\xf4\x93\x0e\x03\xd9\x60\x12\x75\xf4\x99\x5d\x35\xe4\x7e\xb0\xda\xc2\x18\x6d\x6f\x0c\x77\xbb\x5b\x7c\x81\x5c\x96\x7b\x18\x3f\x24\x08\xc0\x7e\xf0\x4d\x74\x5d\xf7\x1d\xbf\x2d\x12\x04\xc4\xd3\xe0\x80\xc6\x0f\xb9\x37\xe3\xa0\x9e\xde\x86\x0c\x61\xb4\x33\x2a\x7d\xf6\x86\xb7\xeb\x38\x6b\xfc\xd0\x0a\xaa\xd2\x56\xcf\xc4\x00\xfb\x67\x12\x9d\xee\x1c\xae\x52\x58\xb2\x42\xba\xfa\x8e\x43\xa8\x22\x9c\x85\xd9\x7c\xd8\x72\x08\x9d\x10\xd8\xb6\x63\x89\x2d\x58\x2d\x81\xfe\x69\x84\x83\x3f\x84\x82\x18\xb6\x74\xa1\xe7\xce\xe0\x43\x1a\x0f\xea\x5e\xaa\xaf\x0d\xfa\x31\x99\xff\x6b\x9b\x7e\xea\xd0\x03\x83\x86\xc7\xf4\xfb\x1e\xfd\xb9\x0d\xff\xf3\x31\xc1\x5f\xf5\x6f\x00\x00\x00\xff\xff\xa3\xf6\xcc\xbc\xce\x08\x00\x00")

func tmplCsharpServerTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplCsharpServerTmpl,
		"tmpl/csharp/server.tmpl",
	)
}

func tmplCsharpServerTmpl() (*asset, error) {
	bytes, err := tmplCsharpServerTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/csharp/server.tmpl", size: 2254, mode: os.FileMode(420), modTime: time.Unix(1460426494, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplGolangServerGogo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x56\x4d\x4f\xdb\x4c\x10\x3e\xdb\xbf\x62\x5e\x0b\xbd\xd8\x91\xe3\x08\x8e\x91\xb8\x00\x3d\x70\x20\x50\x82\xd4\xb3\x3f\xc6\xc9\xb6\xf6\xae\xbb\x1f\x8d\x82\x95\xff\xde\xd9\xb5\x13\x92\x10\x9a\xd0\x43\x55\xf5\x00\xf1\x8e\x9f\x7d\x76\xe6\x99\x0f\x6f\xdb\x16\x58\x32\x8e\x10\x28\x94\x3f\x50\x06\x30\x5c\xad\xfc\x26\xcd\xbf\xa5\x33\x84\xb6\x4d\x26\x69\x8d\x8a\xd6\x08\x64\x6f\xdb\x33\x0b\x63\x39\x5a\x33\x8c\xaf\x20\x99\x76\x6b\x87\x23\x04\xab\x1b\x21\x35\x84\xbe\x17\x64\x4b\x8d\x2a\xf0\xe9\x69\xc6\xf4\xdc\x64\x49\x2e\xea\x11\x4f\xb5\x1a\x32\xe1\x7e\x83\xdd\x57\x2a\xad\x0d\x56\xa3\x99\x18\xea\xb9\x64\xa5\x1e\x75\x3f\x7b\x28\x7c\xc9\xcc\x72\xa4\x34\xed\x2f\x02\x3f\xf2\x7d\xbd\x6c\x10\x9e\x1d\x74\x42\xc6\x5d\x17\x57\xab\xa9\x0b\x0b\x94\x96\x26\xd7\xd0\xfa\x5e\x6f\x18\x1c\x06\xfa\xde\x8d\xe0\x1c\x00\x06\xd6\xc3\xc4\x2e\xfc\x95\xef\x97\x86\xe7\x10\x2a\x18\x1c\x3b\x28\x02\xc1\xef\xd5\x2c\xac\xd5\xac\xa7\xa0\x55\x64\xcf\x95\x56\xae\x2e\xa4\x64\x82\x8b\x1b\x51\x93\xaa\xfa\x51\x0a\x2d\x72\x51\x3d\x61\x5a\xa0\x0c\x9d\x66\xf6\x75\xbf\x26\x9a\xe4\x36\xd5\x69\x44\x81\x7a\x6a\xc1\x74\x3e\x07\x6b\x9b\x9a\xec\x2b\xba\x78\xda\x76\x08\x32\xe5\x94\xac\xb3\x1a\xf5\x5c\x14\x3b\x59\xb9\x77\x26\xe5\x52\x37\x04\x56\x02\x17\x94\x9c\x3b\x75\x2d\x45\x5a\xe4\xa9\xd2\x1d\x60\xbd\x37\x22\xa0\x47\x66\x2a\x87\xfd\xf0\x12\x32\x74\xa0\x3e\xd5\xc1\x78\xcd\xb9\xb6\x3f\x70\x5c\xa4\x4b\x4b\xe1\x35\xd6\x8b\xff\xf7\x39\xf6\x29\x9e\xf0\xbb\x41\xa5\x5b\xbb\x03\xe5\xb6\x40\xb7\x98\x8b\x02\xa7\x2e\x69\xa1\x8c\xa1\x89\x08\x42\x47\x59\xd4\x7f\x57\xc0\x59\x65\x25\xa5\x73\x24\xe3\xba\xe2\x21\xd9\x2d\x62\x4d\x74\x05\x2a\xe9\xf2\xf1\xc6\xed\xf0\x64\x2a\xfa\xd7\x95\x59\x72\xc7\x73\x19\x1e\x57\x84\xea\xd3\x70\x1d\x44\x4e\x17\xac\x14\x3a\x29\xf4\x85\x8d\xab\x67\x9a\x88\x45\x68\x53\xf9\x1b\x02\x49\x54\x27\xee\x51\x8d\xe0\x0a\xff\xb0\xaa\x31\x90\x83\x1f\x90\x36\x33\xa5\x0b\xa7\xab\xf8\x6b\x53\x96\x28\x9d\xcb\x8b\x5f\xf6\xc9\x17\xc9\xb4\xed\x13\x53\x5a\xa6\x1e\xf6\x89\x6f\xc5\xb5\xd8\x78\xd2\xb5\x6f\xf2\x68\xb2\x8a\xa9\xb9\xeb\xa5\x27\x6c\xaa\x65\x0c\xb4\x3d\xb9\xb6\x07\x87\xae\xb1\x3c\x7d\xf9\x26\x47\x9b\xe4\x3f\xb3\x9a\xf1\xd9\x29\xe9\xd7\x0e\x19\xc4\xa0\x2f\xe8\xef\xb2\xaf\x03\x5e\xf4\xdd\xb7\xff\x44\x3a\x7c\x74\xb2\x6c\xda\xf6\xaf\x9d\x2f\xef\x8e\x96\xd7\xc9\xf2\xc0\x93\x53\x86\xcb\xbf\x39\x44\x4e\x09\x7e\x77\x8e\xbc\x5f\x35\x94\xc6\xc3\xa5\x12\xd2\x57\x98\x1c\xda\x7b\x17\x43\x6e\x3f\x6d\xaf\x1f\x36\x57\x36\x87\x87\x4a\xc7\xd3\xde\x11\x0f\xd6\xc8\x29\x02\x26\xf8\x18\x2c\xaf\x8d\xa9\xbb\x2b\xb8\x9d\xc7\xca\xd6\xca\xd2\x3d\x8d\x41\xc5\xb4\xb0\x27\x8f\xe9\x03\x6b\x9d\x89\x7d\x27\xd1\x68\x04\x69\x55\x41\xb6\xae\x1c\xa0\x2b\x87\xa2\xfb\x87\x02\x35\x17\xa6\x2a\x20\x43\x30\x9c\xea\x15\xf8\xe6\x36\x72\xfe\xc0\xcf\xd7\x8e\x74\x7d\x4e\x35\xab\x72\xc9\x32\x3c\xac\xf2\x80\x1a\xb3\x87\x6f\x35\x52\xb4\xcb\xf1\xd9\xa0\xc1\x2d\xa2\x83\x2c\x01\xbe\xc8\x26\xdf\xa6\xb3\x3d\xe8\x6f\x67\xe9\x67\x00\x00\x00\xff\xff\x5d\xf9\x5a\xba\x57\x09\x00\x00")

func tmplGolangServerGogoBytes() ([]byte, error) {
	return bindataRead(
		_tmplGolangServerGogo,
		"tmpl/golang/server.gogo",
	)
}

func tmplGolangServerGogo() (*asset, error) {
	bytes, err := tmplGolangServerGogoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/golang/server.gogo", size: 2391, mode: os.FileMode(420), modTime: time.Unix(1460426583, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/csharp/server.tmpl": tmplCsharpServerTmpl,
	"tmpl/golang/server.gogo": tmplGolangServerGogo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"csharp": &bintree{nil, map[string]*bintree{
			"server.tmpl": &bintree{tmplCsharpServerTmpl, map[string]*bintree{}},
		}},
		"golang": &bintree{nil, map[string]*bintree{
			"server.gogo": &bintree{tmplGolangServerGogo, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

