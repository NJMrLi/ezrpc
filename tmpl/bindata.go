// Code generated by go-bindata.
// sources:
// tmpl/csharp/server.gocs
// tmpl/golang/server.gogo
// DO NOT EDIT!

package tmpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplCsharpServerGocs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x54\xdf\x8b\xe3\x36\x10\x7e\xb6\xff\x8a\x21\x2c\xd4\x0e\x39\xa5\xcf\x17\xee\x61\x6f\x2f\xb4\x0b\xcd\xdd\x72\x49\x29\xec\xcb\xa2\xc8\x93\x44\xad\x2d\x19\x49\xce\xae\x1b\xfc\xbf\x77\x24\xcb\xf9\xd1\x2c\xed\xb6\x50\x7a\x21\x24\x96\xf4\xcd\x37\x9a\x99\xef\xf3\xe1\x70\xe3\xaa\xba\x2c\xb8\xe3\xf0\xfe\x03\x30\x78\xd7\x75\xe9\x74\x3c\x4e\x61\x0c\xab\x9d\xb4\xb0\x91\x25\x02\xfd\xf3\xc6\xe9\x2d\x2a\x34\xdc\x61\x01\xeb\x16\xf0\x77\x53\x0b\x0f\xfb\xa4\xd5\x77\x0e\xc4\x8e\xab\x2d\x42\xc5\x55\xc3\xcb\xb2\xa5\x83\x69\x9a\x36\x56\xaa\x2d\xcc\x1f\xbf\x3e\xdc\xb1\xcf\xdc\xd9\x59\xdc\xf9\x7c\xbb\x5a\xb2\xbb\x52\xa2\x72\xc3\xd6\xb2\xb5\x0e\xab\x61\xb5\xda\x19\xb9\x71\x6c\x65\xb8\xb2\xb5\x36\x84\x4a\x15\xaf\xd0\xd6\x5c\x20\x1c\x0e\x44\x16\x17\x5d\x07\x87\x34\xb1\x8e\x3b\x29\x40\x94\xdc\x5a\x7f\xbc\x44\xb3\x97\x02\x03\xac\xeb\xe2\xca\x03\x93\xe9\x14\x1e\x8c\x16\x68\xad\x36\xbe\xac\x8b\x92\xe2\x42\x1b\x02\xd6\x46\xee\x69\x1f\x22\xf5\x15\x29\x3b\xd1\xd4\xc3\xd3\xd3\xec\x3a\xf0\xfe\x4e\x2b\x85\xc2\x49\xad\x40\xd0\x23\x61\x3c\xa8\x59\x97\x74\x18\x31\x7b\x2d\x0b\x90\x4a\xba\xec\x4d\x69\x26\x97\xa4\x79\x28\x2c\x39\xdd\x02\x3e\x9c\xb0\xfe\x46\x49\xc8\x4b\xbb\x22\xe4\x4e\x04\x5b\x36\x6b\x2b\x8c\x5c\xe3\xad\x6d\x95\xc8\x46\x5f\x14\xbb\xce\x3c\x1e\x4d\x40\xab\x8f\x46\xf3\x42\x70\xeb\xf2\xd9\xeb\xb1\xaf\x07\x8e\x82\x3c\x02\xc3\xc2\x6e\x43\x6c\x97\x5e\x77\x27\x54\x1e\x20\x99\x5e\xff\x4a\x15\x81\x45\x55\x20\x95\x48\x5b\x3f\x72\x55\x94\x68\xe6\x7b\x92\xc9\xad\xd9\x5a\xc0\x58\xea\x9e\x1b\x70\x5e\x1a\x54\x93\xc2\xe7\x2b\xb5\xb0\xd5\x02\x2b\x6d\xda\x8f\xcd\x66\x83\x26\x43\xb6\xa0\x5e\xf0\x2d\xb2\x4f\x24\xf3\xbe\x0e\x4f\x21\xa9\x4b\x2e\x52\xcc\x1f\xa9\xd1\x4e\x67\x81\x36\x9f\x01\xe9\x44\x2a\x0f\x74\xa6\xed\x93\x42\x72\xc1\x0a\xeb\x66\x13\x98\x80\x3e\x31\x1a\xb4\x67\x3c\xee\x52\x09\x50\xd9\x6d\xdf\xf4\xc4\x3e\x4b\x27\x76\x70\x76\x1b\xea\xa4\x2f\x39\x16\x95\x1c\x0e\xef\xc0\x04\x13\xdd\x78\xad\x4f\xe0\xa6\x42\xb7\xd3\x45\xf0\xe5\xd0\xe2\x45\xd8\xb2\x64\xd2\x21\x44\x6e\x40\x51\x19\xd9\xcf\x4e\x96\x96\xdd\xdb\xe3\xc0\x7a\xe8\xc0\x92\xc7\x10\x3a\x41\x18\x9d\xd9\xfe\xcf\xd3\xa3\x23\x15\x9e\x46\xef\x43\xc0\x90\x24\xf2\xb0\x2f\xd4\x2e\xde\x46\xb6\x33\xd5\x9d\x02\x9f\xa2\x66\xb3\xef\x27\x7d\x8f\x27\xa0\x9a\xb2\xec\x1b\xdf\xf3\x61\x69\x71\xa0\xa0\x46\xbe\x6d\x8e\x03\x81\x7e\x65\x6e\x44\xd2\x4f\x4d\x37\x2e\xfd\x47\x57\x0b\x6c\x79\x1c\x52\x42\xf3\x8a\xcc\x5e\x93\x43\x46\xda\x1d\xa6\x45\xa7\xa7\x09\x7e\xc5\xba\x6c\xcf\x30\x5e\x5f\x04\xa0\xcb\xb0\x1f\xd0\x9d\xae\xdd\x23\xb2\xec\x3e\x78\x26\x3a\xa8\xf6\xf6\xcd\x7b\xbd\xe7\xec\xe4\x68\xf6\xe0\x5f\x0e\x76\x97\x55\xd1\x38\x43\xcf\x54\x71\x6c\x99\x41\xfe\xdb\x2c\xbd\x3e\xb9\x5c\x85\xdf\x0e\x04\x0f\xc2\x9b\xbf\x08\x0c\x39\x01\x5f\x06\xcd\x51\x56\xab\x4b\x64\xbf\x18\xe9\xf0\x27\xa9\x30\xc3\x17\xb6\xd2\x4b\x67\xe8\x2d\x9c\xe5\x7d\xfa\xee\xaf\xcd\x7b\x14\xdc\x37\x6f\xe1\xff\xd2\x83\x7f\x63\xbf\x0b\xf7\x85\xd7\xed\xdb\x0d\xf8\x2f\x3c\xf6\x7f\x08\x84\xbe\x5d\xfa\x47\x00\x00\x00\xff\xff\x43\xe4\x02\xdc\x50\x08\x00\x00")

func tmplCsharpServerGocsBytes() ([]byte, error) {
	return bindataRead(
		_tmplCsharpServerGocs,
		"tmpl/csharp/server.gocs",
	)
}

func tmplCsharpServerGocs() (*asset, error) {
	bytes, err := tmplCsharpServerGocsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/csharp/server.gocs", size: 2128, mode: os.FileMode(420), modTime: time.Unix(1463122145, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplGolangServerGogo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x57\x5f\x6f\xdb\x36\x10\x7f\x96\x3e\xc5\x4d\x28\x56\xc9\x75\x68\xa4\x8f\x06\xf2\x92\x76\xc0\x82\xa1\x4e\x17\x77\xc8\xc3\xb0\x07\xfd\x39\xdb\x5c\x24\xd2\x23\xa9\x1a\x9e\xe0\xef\xbe\x23\x29\x79\xb2\x2d\xcc\x71\x07\x04\xc3\x90\x00\x91\xc4\xd3\xf1\xee\x77\x7f\xf8\xb3\xae\x69\x0a\x5c\x70\x81\x10\x69\x54\x5f\x51\x45\x70\xb5\xdb\x85\xeb\x34\x7f\x4a\x97\x08\x4d\xc3\x66\x69\x85\x9a\xd6\x48\xe2\xa6\x79\x63\xb5\x78\x8e\x56\x0a\xd3\x1b\x60\x73\xbf\x76\x6a\xa4\xc1\xab\xb5\x54\x06\xe2\x30\x88\xb2\xad\x41\x1d\x85\xf4\xb4\xe4\x66\x55\x67\x2c\x97\xd5\xe4\xb1\xfe\xca\xb5\x99\x2c\xe5\x95\x59\x29\xbe\x30\x13\x7f\x8b\x0e\xb5\xf0\xcf\xac\xde\xd2\x55\xad\x73\x7f\x1d\x7c\xaf\x4d\x6a\x74\x71\xf4\x4a\x90\xec\x8a\x4b\x77\x8f\xc2\x24\x0c\xcd\x76\x8d\xf0\xc5\x79\x99\x91\xec\x30\x84\xdd\x6e\xee\xa2\x06\x6d\x54\x9d\x1b\x68\xc2\xa0\x15\xd0\xdf\x68\x58\x37\x0c\x3e\x48\x21\xc0\xfd\x8d\xac\x1b\x66\xd7\x61\xf0\x91\x2b\xcc\xcd\x4f\xb8\xb5\xc6\xb8\x58\x92\x24\xc5\x4a\x3a\xcd\x91\x8b\x82\x79\x41\xb8\x0b\xc3\x45\x2d\x72\x88\x35\x8c\xce\x21\x4b\x40\x8a\x4f\x7a\x19\x57\x7a\xd9\x7a\xa3\x55\x42\x40\x9b\xe6\x0a\xf8\x02\xd8\x8f\xa9\x9e\x49\x55\xa5\x25\xc9\x3f\xa1\x59\xc9\x82\xca\x10\x28\x5b\x1c\x9f\x5b\x36\xc3\xcd\x07\x59\x51\x09\xcd\x67\x25\x8d\xcc\x65\xf9\x80\x69\x81\x2a\x76\x15\xb2\xaf\xdb\x35\xf9\x20\x88\x26\x4d\x28\x6d\x81\xde\x70\x93\xaf\xc0\xca\xe6\x75\xf6\x3b\xba\xec\x58\xa7\x2a\x15\xd4\x19\x6f\x2a\xe7\xeb\xa0\x07\xbc\x7b\xed\x1a\xc5\x81\xfb\xc5\xf0\x52\xb3\xbb\x0e\xa0\xdf\xd1\xee\xb4\x28\xf3\x54\x53\xe3\x1d\x07\xce\x48\xe0\x75\xda\xae\x8a\xa6\x9d\xc1\x4e\x7e\x2f\x70\x93\x6e\xad\x89\x60\x6d\x21\x7c\x7f\x6c\xe3\xd8\xc4\x03\xfe\x51\xa3\x36\x8d\xdd\x81\xaa\x9f\x9d\x8f\x98\xcb\x02\xe7\xae\xfe\xb1\x1a\xc3\x3a\x21\x15\x72\x65\xb5\xbe\xbb\x01\xc1\x4b\xdb\x15\xe4\x87\x6a\x6a\x4a\x11\x93\xdc\x6a\x74\x86\x6e\x40\x33\x5f\xa9\x13\xd8\xf1\xb3\x4d\xd1\xc5\x37\x33\xbb\x13\xb9\x8a\xcf\x67\x84\x5a\xbd\x16\x26\x4a\x5c\x5e\xb0\xd4\xe8\x52\x61\xae\x6d\x5c\xad\xa5\x99\xdc\xc4\xb6\x8e\xdf\x90\x20\x85\xfa\x99\x7b\xf4\x5a\x0a\x8d\x2f\x9c\xd5\x31\x10\xc0\x0b\x52\x9b\xd5\x0b\x17\x8e\x6f\xf7\xdb\x7a\xb1\x40\xe5\x20\x6f\xfe\xf1\x90\x3c\x2a\x6e\xec\x21\xa9\x17\xd6\x52\xab\xf6\x83\xe8\xc5\xb5\xd9\x23\xf1\x1c\xc0\x3e\xd7\x59\xc9\xf5\xca\x1d\xa4\x07\x5c\x97\xdb\x31\xd0\x76\x76\x6b\x1d\xc7\xee\x54\x05\xe6\xfd\x49\x8d\xf6\xc5\xff\xc2\x2b\xe2\x8d\xe7\x94\xdf\x38\xcd\x68\x0c\xe6\x9a\xfe\xdf\xb7\x7d\x20\x8a\xf6\xe8\x1d\x3f\x05\xfd\x05\xe5\xe4\xe0\x78\x12\x81\x78\xea\x6a\xcf\x67\x77\x9c\x77\x97\xd2\x94\xb7\x72\xca\x54\xff\x9a\x8c\x82\x27\xdc\x96\x28\xac\x15\xba\xc5\x9a\xed\xa9\x36\x19\xe2\xa9\x5f\xbd\xfa\xbb\xeb\xe9\x6f\xdf\x4e\x59\x07\x29\x79\xa5\xac\x57\xca\x7a\xa5\xac\x97\xa6\xac\xcb\xf8\x67\x8e\x66\x4f\x0b\xf1\xd3\xfe\x2b\xcc\x11\x50\x8f\x31\xa8\x4e\xf4\xd2\x89\xdc\xc7\x98\x25\x0d\x9d\x2b\x9e\xa1\xdd\xf4\x2e\x62\x27\x91\x8c\x08\xb3\x66\x1d\xbd\x25\x61\x1f\xe5\x65\x04\x79\xab\x64\x5a\x10\x81\x0c\x70\x64\xef\x6b\x6e\xaf\xf5\x5f\xfd\x9a\x3b\x02\x78\xca\x8e\xf7\xe2\x34\x8b\x03\x04\xf9\xff\x24\xc2\xe7\x04\x7f\xc8\x85\x67\x7e\xac\x5d\x8b\x51\x59\x87\xfb\x2a\xa6\x89\x8b\xa0\x1d\xbd\x1b\x43\x6e\x67\x94\xbf\xc7\x93\x31\x54\xbc\x28\x4a\xfa\x09\xb2\x4c\xc9\x18\xf3\x03\x89\x9d\x19\xf6\xf2\xe4\x7c\x17\xdb\x1c\x14\x7e\xaa\xa1\x2a\x78\x1b\x04\xcd\x1f\xa5\x47\x9a\xc2\xac\xaf\x38\x3f\x76\x48\xfe\x5c\x13\x0e\x96\xdb\x5b\x6e\xee\x28\x0e\xac\x50\x50\x2e\xb9\x14\x53\xb0\x71\xd9\xec\xfa\xb1\xd4\xed\x3c\x87\xce\x16\xc8\x3f\x4d\x41\x8f\x69\x61\xd1\x4c\x69\xfc\x72\x80\x68\xed\x71\x4e\xc1\x87\x30\x0e\x5d\xf9\x26\x13\x48\xcb\x12\xb2\xae\xab\x81\xe6\x5d\x4d\xc3\xaf\x06\xbd\x92\x75\x59\x40\x86\x50\x0b\x3a\x51\x20\xba\x51\x18\xde\xde\x8b\xb7\x5d\x26\x7a\x0c\x32\x58\x7c\xc7\x1f\xbe\xcb\x7a\x14\x90\xec\xb7\xff\x5c\x63\x8d\x3d\x1b\x83\x06\x22\x3f\x06\xf7\x2c\x59\xe2\x20\xf4\x0a\x4d\xad\x44\x2b\x3e\xe0\xa6\xbf\x02\x00\x00\xff\xff\x4c\x69\x2c\x84\xda\x0f\x00\x00")

func tmplGolangServerGogoBytes() ([]byte, error) {
	return bindataRead(
		_tmplGolangServerGogo,
		"tmpl/golang/server.gogo",
	)
}

func tmplGolangServerGogo() (*asset, error) {
	bytes, err := tmplGolangServerGogoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/golang/server.gogo", size: 4058, mode: os.FileMode(420), modTime: time.Unix(1465378068, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/csharp/server.gocs": tmplCsharpServerGocs,
	"tmpl/golang/server.gogo": tmplGolangServerGogo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"csharp": &bintree{nil, map[string]*bintree{
			"server.gocs": &bintree{tmplCsharpServerGocs, map[string]*bintree{}},
		}},
		"golang": &bintree{nil, map[string]*bintree{
			"server.gogo": &bintree{tmplGolangServerGogo, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

