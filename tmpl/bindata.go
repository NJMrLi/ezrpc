// Code generated by go-bindata.
// sources:
// tmpl/csharp/server.tmpl
// tmpl/golang/server.gogo
// DO NOT EDIT!

package tmpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplCsharpServerTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x54\xdf\x6f\xdb\x36\x10\x7e\x96\xfe\x8a\x83\x11\x60\x52\xe0\x32\x7b\xae\xd1\x87\x34\x0d\xb6\x00\x4b\x53\xd4\x1e\x06\xec\xa5\xa0\xa9\xb3\xcd\x8d\x22\x05\x92\x72\xa3\x1a\xfa\xdf\x77\xa4\x28\x3b\xfe\xb1\xae\x1b\x30\x6c\x41\x90\x88\x77\xdf\x7d\x1f\xef\x17\x77\xbb\x2b\x5f\x37\xaa\xe2\x9e\xc3\xeb\x37\xc0\xe0\x55\xdf\xe7\x37\xd7\xd7\x39\x5c\xc3\x62\x23\x1d\xac\xa4\x42\xa0\xff\xbc\xf5\x66\x8d\x1a\x2d\xf7\x58\xc1\xb2\x03\xfc\x62\x1b\x11\x60\xef\x8c\xfe\xce\x83\xd8\x70\xbd\x46\xa8\xb9\x6e\xb9\x52\x1d\x39\x6e\xf2\xbc\x75\x52\xaf\x61\xde\x39\x8f\xf5\xec\xe8\xc4\xee\x8c\x52\x28\xbc\x34\xda\xfd\xb9\x87\xfd\x10\x14\xa5\x38\x41\x2c\xf0\xd9\x9f\x98\x1e\x9e\x46\xc3\x62\x63\xe5\xca\x1f\x9f\xbe\xa2\xf6\xb1\xd5\x5e\xd6\xc8\xe6\xa4\xc3\x95\xfc\xc2\x03\xe8\x24\xfa\x83\x35\xde\x08\xa3\x4e\xcc\x0b\xcb\xb5\x6b\x8c\xdd\x8b\xbd\xbf\x5d\xcc\xd9\x9d\x92\xa8\xc9\x94\x6b\x5e\xa3\x6b\xb8\x40\xd8\xed\xd8\xfb\xf1\xd0\xf7\xb0\xcb\x33\xe7\x49\x47\x80\x50\xdc\xb9\xe0\x26\xf5\xad\x14\x18\x61\x7d\x9f\x4e\x01\x98\xdd\xdc\x00\xc9\x0b\x74\xce\xd8\xd0\x87\xa3\x1e\xa4\x83\xb1\x04\x6c\xac\xdc\x92\x1d\x12\xf5\x21\xa8\x19\xbf\x3e\xcd\xce\x61\x0f\x77\x46\xeb\xa1\x32\x20\xe8\x93\x30\x01\xd4\x2e\x15\x39\x13\x66\x6b\x64\x05\x52\x4b\x5f\x5c\x20\x9d\x1e\x53\x94\xf1\xd2\xd9\x41\x13\xde\x1c\xb0\x41\x3f\x8b\x2a\x64\x15\x51\x29\x13\x6c\xde\x2e\x9d\xb0\x72\x89\xb7\xae\xd3\xa2\x98\x3c\x69\x76\x56\x11\x76\x3d\x99\x82\xd1\x6f\xad\xe1\x95\xe0\xce\x97\xb3\xcb\xb1\x97\x03\x27\x71\x56\x23\xc3\xa3\x5b\xc7\xd8\x3e\x3f\xaf\x45\xcc\x33\x42\x0a\xb3\xfc\x8d\x32\x02\x87\xba\x42\x4a\x91\x4c\x3f\x72\x5d\x29\xb4\xf7\x5b\x6a\xee\xad\x5d\x3b\xc0\x94\xea\x96\x5b\xf0\x61\x12\x28\x27\x8d\x9f\xcf\x86\x83\x2d\x1e\xb1\x36\xb6\x7b\xdb\xae\x56\x68\x0b\x64\x8f\x54\x0b\xbe\x46\xf6\x8e\x76\x6e\xc8\x23\x50\x48\xaa\x92\x4f\x14\xf7\xbf\xc6\x89\x2b\x22\x6d\x39\x03\x9a\x01\xa9\x03\xd0\xdb\x6e\x10\x85\xec\x88\x15\x96\xed\x2a\x32\x01\xfd\xa4\x68\x30\x81\x71\x6f\xa5\x14\xa0\x76\xeb\xa1\xe8\x99\xfb\x2c\xbd\xd8\xc0\x8b\xdb\x50\x25\x43\xca\x29\xa9\x6c\xb7\x7b\x05\x36\x6e\xf4\x55\x98\xe3\x29\x5c\xd5\xe8\x37\xa6\x8a\x8f\xc4\x58\xe2\xc7\x68\x72\xf4\x62\x8c\x21\x72\x05\x9a\xd2\x28\x7e\xf6\x52\x39\xf6\xe0\xf6\x0d\x1b\xa0\x23\x4b\x99\x42\xc8\x83\x30\x79\xf1\x06\x9d\x76\x8f\x5c\x3a\x7e\x4d\x5e\xc7\x80\x51\x24\xf1\xb0\x27\x2a\x17\xef\x12\xdb\x8b\xa9\x3b\x04\x7e\x4a\x33\x5b\x7c\x3f\x1d\x6a\x3c\x05\xdd\x2a\x35\x14\x7e\xe0\x43\xe5\x70\xa4\xa0\x42\x7e\x5b\x1f\x47\x02\x73\xa1\x6f\x44\x32\x74\xcd\xb4\x3e\xff\x5b\x57\x8b\x6c\x65\x6a\x52\x46\xfd\x4a\xcc\x61\x26\x47\x45\xb2\x8e\xdd\x22\xef\xa1\x83\x1f\xb1\x51\xdd\x0b\x4c\x98\x2f\x02\xd0\x65\xe8\x19\xf5\x87\x6b\x0f\x88\xa2\x78\x88\x3b\x93\x36\xa8\x09\xeb\x5b\x0e\xf3\x5e\xb2\xc3\x46\xb3\x0f\xe1\x29\x70\x9b\xa2\x4e\x8b\x33\xd6\x4c\x57\xfb\x92\x59\xe4\xbf\xcf\xf2\x73\xcf\xf1\x29\xfe\xed\x41\xf0\x38\x78\xf7\xcf\x02\xa3\x26\xe0\xf3\x38\x73\xa4\xea\x8c\x42\xf6\x8b\x95\x1e\x7f\x92\x1a\x0b\x7c\x66\x0b\x33\xf7\x96\x1e\xd7\xa2\x1c\xe4\xfb\xaf\x2f\xef\x7e\xe0\xfe\xf7\x2b\xfc\x6f\xee\xe0\x5f\xac\xdf\xd1\xf6\xc5\xe7\xf6\xdb\x17\xf0\x1f\xec\xd8\x7f\x31\x20\xf4\xdb\xe7\x7f\x04\x00\x00\xff\xff\x84\x98\xb1\x5d\xdd\x08\x00\x00")

func tmplCsharpServerTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplCsharpServerTmpl,
		"tmpl/csharp/server.tmpl",
	)
}

func tmplCsharpServerTmpl() (*asset, error) {
	bytes, err := tmplCsharpServerTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/csharp/server.tmpl", size: 2269, mode: os.FileMode(420), modTime: time.Unix(1461215154, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplGolangServerGogo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x57\x5f\x6f\xe3\x36\x0c\x7f\xb6\x3f\x05\x67\x1c\x76\x76\x2f\x51\xd0\x7b\x0c\xd0\x97\x5e\x07\xac\x18\x9a\xde\x9a\x1b\xf6\x30\xec\xc1\x76\x98\x44\xab\x2d\x65\xfa\xb3\x20\x67\xe4\xbb\x8f\x92\xec\x5c\xe2\x04\x4b\x7a\xc0\x86\x6d\x68\x80\xd6\x16\x45\x51\xe4\x8f\xe4\x4f\x56\xd3\xcc\x70\xce\x05\x42\xa2\x51\xfd\x81\x2a\x81\xe1\x76\x1b\xaf\xf2\xf2\x39\x5f\x20\x34\x0d\x9b\xe4\x35\x6a\x1a\x23\x89\x9b\xe6\x8d\xd3\xe2\x25\x3a\x29\x8c\x6f\x80\x4d\xc3\xd8\xab\x91\x06\xaf\x57\x52\x19\x48\xe3\x28\x29\x36\x06\x75\x12\xd3\xdb\x82\x9b\xa5\x2d\x58\x29\xeb\x91\xc8\x8d\x1e\x72\xe9\x9f\xc9\xe1\x94\xce\x6b\x8b\xd5\x68\x21\x87\x66\xa9\xf8\xdc\x8c\xc2\xa3\xa7\x85\x9f\x0b\xbb\x19\x69\x43\xeb\x67\x49\x9c\xc5\xb1\xd9\xac\x10\x3e\x79\xd5\x09\x09\x0f\x5d\xdc\x6e\xa7\x3e\x2a\xd0\x46\xd9\xd2\x40\x13\x47\xad\x80\x7e\x57\xa7\x75\xe3\xe8\x83\x14\x02\xfc\xef\xca\xf9\xc9\xdc\x38\x8e\xee\xb8\xc2\xd2\xfc\x80\x1b\x67\x8c\x8b\x45\xbc\x8d\xe3\xb9\x15\x25\xa4\x1a\xae\xce\x39\x90\x81\x14\x0f\x7a\x91\xd6\x7a\xd1\x1a\xa5\x51\xe6\xfc\x51\x0e\xc6\x10\x2a\x9b\xe0\xfa\x83\xac\x09\x6c\xf3\x51\x49\x23\x4b\x59\x3d\x61\x3e\x43\x95\x7a\x2c\xdd\x74\x3b\x26\x33\xec\x2e\x37\x79\x46\x00\x44\x7a\xcd\x4d\xb9\x04\x27\x9b\xda\xe2\x37\xf4\x71\x36\xcd\x10\x54\x2e\x28\x87\x6f\x6a\x34\x4b\x39\x3b\xc8\xd6\x83\x17\x69\x9f\xd2\x21\xf0\x39\xfc\x64\x78\xa5\xd9\xbd\x9e\x48\x55\xe7\x55\x98\xee\x56\x92\x56\x54\xe6\x9a\x4a\xa4\x1f\x1b\x23\x41\xd0\x69\xf3\x9f\x8c\x3b\x83\x9d\xfc\x51\xe0\x3a\xdf\x38\x13\xd1\xca\xb9\xf0\x6d\xdf\x46\xdf\xc4\x13\xfe\x6e\x51\x9b\xc6\xad\x40\xb5\x8f\xce\x1d\x96\x72\x86\x53\x9f\xc9\x54\x0d\x60\x95\x91\x0a\x6d\xe5\xb4\xbe\xb9\x01\xc1\x2b\x87\x27\xed\x43\xd9\x31\x95\x48\x49\xee\x34\x3a\x43\x37\xa0\x59\x48\xc6\x91\xdb\xe9\xc5\xa6\xe8\x5f\xa8\x3d\x76\x2f\x4a\x95\x9e\x47\x84\x8a\xd6\x0a\x93\x64\x1e\x17\xac\x34\x7a\x28\xcc\xb5\x8b\xab\xb5\x34\x91\xeb\xd4\xe5\xf1\x2b\x00\x52\xa8\x2f\x5c\xa3\x57\x52\x68\xfc\x87\x51\x1d\x00\x39\xf8\x02\x68\x0b\x3b\xf7\xe1\x84\x72\xbf\xb5\xf3\x39\x2a\xef\xf2\xfa\x2f\x9b\xe4\x67\xc5\x8d\x6b\x12\x3b\x77\x96\x5a\xb5\xef\xc4\x5e\x5c\xeb\x9d\x27\xa1\x9b\xd9\x47\x5b\x54\x5c\x2f\x7d\x23\x3d\xe1\xaa\xda\x0c\x80\x96\xb3\x5b\xb7\x71\xea\xbb\x2a\x32\xef\x8f\x72\xb4\x4b\xfe\x27\x5e\x13\x03\x5c\x92\x7e\xe3\x35\x93\x01\x98\x6b\xfa\x7b\xdf\xd6\x81\x98\xb5\xad\xd7\x7f\x23\x1c\x5e\x4a\x2b\x81\x97\xfe\x06\x66\x89\x9e\x71\x53\xa1\x70\x56\xe8\x91\x6a\xb6\x63\xc0\xec\x14\xe9\xfc\x12\xd4\xdf\x5d\x8f\x7f\xfd\x7a\xfe\x09\x5b\xbc\xf2\xcf\x2b\xff\xbc\xf2\xcf\x7f\x84\x7f\x6e\x95\xcc\x67\xd4\x9f\x27\x28\xa8\xed\x45\xf6\x7d\xae\x77\x5a\x0f\xbb\x9e\xfe\x77\x7d\xf9\xf4\x1c\x3c\x26\x9f\x47\xc1\x2e\xe1\x9f\xff\x27\xcf\x5c\x12\xfc\x21\xd5\x1c\x17\xd6\x97\xc1\xcb\x4a\x6c\x8a\x66\x77\xf2\xa4\xcf\xbb\xef\x6f\x7f\xc6\xed\x1d\x4a\x14\x38\x4d\xc6\x5d\x87\x51\x41\xe8\x52\xf1\x02\xfd\x92\x77\x90\x1c\x07\x70\x45\x6d\xa1\x59\x77\x82\x66\x3b\xb7\xa8\xda\x4e\xfb\x92\xd2\xf5\x86\x10\xeb\xcd\x0d\xa0\x74\x17\x86\x2f\x77\x85\xec\x7c\x54\xde\xf7\x93\x75\x12\xe6\x9b\x7b\xda\x09\x6b\x14\x94\x04\x2e\xc5\x18\xdc\xce\x2e\x2d\xe1\x96\xe6\x57\x9e\xdb\xc3\x65\x36\xbc\x8d\x41\x0f\x68\xe0\x7c\x1b\xd3\xad\xc6\xb9\x3b\x88\x7d\x96\x47\x23\xc8\xab\x0a\x8a\xae\xf8\x81\x2e\x7b\x9a\x6e\x7e\x1a\xf4\x52\xda\x6a\x06\x05\x82\x15\xd4\x78\x20\xba\x7b\x20\xbc\x7d\x14\x6f\x3b\x47\xfa\x58\x9f\x2c\x14\x8f\x73\x50\xdf\xa3\x8b\xec\xd0\xc6\x8f\x16\x2d\xee\x19\x3a\x69\x25\xc1\xcf\x6a\x55\xee\x9b\x73\x4c\x43\x54\x82\xc6\x2a\xd1\x4a\xe3\xfd\x52\xfb\x33\x00\x00\xff\xff\x05\x17\x35\x03\xe0\x0e\x00\x00")

func tmplGolangServerGogoBytes() ([]byte, error) {
	return bindataRead(
		_tmplGolangServerGogo,
		"tmpl/golang/server.gogo",
	)
}

func tmplGolangServerGogo() (*asset, error) {
	bytes, err := tmplGolangServerGogoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/golang/server.gogo", size: 3808, mode: os.FileMode(420), modTime: time.Unix(1461216880, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/csharp/server.tmpl": tmplCsharpServerTmpl,
	"tmpl/golang/server.gogo": tmplGolangServerGogo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"csharp": &bintree{nil, map[string]*bintree{
			"server.tmpl": &bintree{tmplCsharpServerTmpl, map[string]*bintree{}},
		}},
		"golang": &bintree{nil, map[string]*bintree{
			"server.gogo": &bintree{tmplGolangServerGogo, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

