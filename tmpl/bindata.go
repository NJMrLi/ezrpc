// Code generated by go-bindata.
// sources:
// tmpl/csharp/server.gocs
// tmpl/golang/server.gogo
// DO NOT EDIT!

package tmpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplCsharpServerGocs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x54\xdf\x6f\xdb\x36\x10\x7e\x96\xfe\x8a\x83\x11\x60\x52\xe0\x32\x7b\xae\xd1\x87\x34\x0d\xb6\x00\x4b\x53\xd4\x1e\x06\xec\xa5\xa0\xa9\xb3\xcd\x8d\x22\x05\x92\x72\xa3\x1a\xfa\xdf\x77\xa4\x28\x3b\xfe\xb1\xae\x1b\x30\x6c\x41\x90\x88\x77\xdf\x7d\x1f\xef\x17\x77\xbb\x2b\x5f\x37\xaa\xe2\x9e\xc3\xeb\x37\xc0\xe0\x55\xdf\xe7\x37\xd7\xd7\x39\x5c\xc3\x62\x23\x1d\xac\xa4\x42\xa0\xff\xbc\xf5\x66\x8d\x1a\x2d\xf7\x58\xc1\xb2\x03\xfc\x62\x1b\x11\x60\xef\x8c\xfe\xce\x83\xd8\x70\xbd\x46\xa8\xb9\x6e\xb9\x52\x1d\x39\x6e\xf2\xbc\x75\x52\xaf\x61\xde\x39\x8f\xf5\xec\xe8\xc4\xee\x8c\x52\x28\xbc\x34\xda\xfd\xb9\x87\xfd\x10\x14\xa5\x38\x41\x2c\xf0\xd9\x9f\x98\x1e\x9e\x46\xc3\x62\x63\xe5\xca\x1f\x9f\xbe\xa2\xf6\xb1\xd5\x5e\xd6\xc8\xe6\xa4\xc3\x95\xfc\xc2\x03\xe8\x24\xfa\x83\x35\xde\x08\xa3\x4e\xcc\x0b\xcb\xb5\x6b\x8c\xdd\x8b\xbd\xbf\x5d\xcc\xd9\x9d\x92\xa8\xc9\x94\x6b\x5e\xa3\x6b\xb8\x40\xd8\xed\xd8\xfb\xf1\xd0\xf7\xb0\xcb\x33\xe7\x49\x47\x80\x50\xdc\xb9\xe0\x26\xf5\xad\x14\x18\x61\x7d\x9f\x4e\x01\x98\xdd\xdc\x00\xc9\x0b\x74\xce\xd8\xd0\x87\xa3\x1e\xa4\x83\xb1\x04\x6c\xac\xdc\x92\x1d\x12\xf5\x21\xa8\x19\xbf\x3e\xcd\xce\x61\x0f\x77\x46\xeb\xa1\x32\x20\xe8\x93\x30\x01\xd4\x2e\x15\x39\x13\x66\x6b\x64\x05\x52\x4b\x5f\x5c\x20\x9d\x1e\x53\x94\xf1\xd2\xd9\x41\x13\xde\x1c\xb0\x41\x3f\x8b\x2a\x64\x15\x51\x29\x13\x6c\xde\x2e\x9d\xb0\x72\x89\xb7\xae\xd3\xa2\x98\x3c\x69\x76\x56\x11\x76\x3d\x99\x82\xd1\x6f\xad\xe1\x95\xe0\xce\x97\xb3\xcb\xb1\x97\x03\x27\x71\x56\x23\xc3\xa3\x5b\xc7\xd8\x3e\x3f\xaf\x45\xcc\x33\x42\x0a\xb3\xfc\x8d\x32\x02\x87\xba\x42\x4a\x91\x4c\x3f\x72\x5d\x29\xb4\xf7\x5b\x6a\xee\xad\x5d\x3b\xc0\x94\xea\x96\x5b\xf0\x61\x12\x28\x27\x8d\x9f\xcf\x86\x83\x2d\x1e\xb1\x36\xb6\x7b\xdb\xae\x56\x68\x0b\x64\x8f\x54\x0b\xbe\x46\xf6\x8e\x76\x6e\xc8\x23\x50\x48\xaa\x92\x4f\x14\xf7\xbf\xc6\x89\x2b\x22\x6d\x39\x03\x9a\x01\xa9\x03\xd0\xdb\x6e\x10\x85\xec\x88\x15\x96\xed\x2a\x32\x01\xfd\xa4\x68\x30\x81\x71\x6f\xa5\x14\xa0\x76\xeb\xa1\xe8\x99\xfb\x2c\xbd\xd8\xc0\x8b\xdb\x50\x25\x43\xca\x29\xa9\x6c\xb7\x7b\x05\x36\x6e\xf4\x55\x98\xe3\x29\x5c\xd5\xe8\x37\xa6\x8a\x8f\xc4\x58\xe2\xc7\x68\x72\xf4\x62\x8c\x21\x72\x05\x9a\xd2\x28\x7e\xf6\x52\x39\xf6\xe0\xf6\x0d\x1b\xa0\x23\x4b\x99\x42\xc8\x83\x30\x79\xf1\x06\x9d\x76\x8f\x5c\x3a\x7e\x4d\x5e\xc7\x80\x51\x24\xf1\xb0\x27\x2a\x17\xef\x12\xdb\x8b\xa9\x3b\x04\x7e\x4a\x33\x5b\x7c\x3f\x1d\x6a\x3c\x05\xdd\x2a\x35\x14\x7e\xe0\x43\xe5\x70\xa4\xa0\x42\x7e\x5b\x1f\x47\x02\x73\xa1\x6f\x44\x32\x74\xcd\xb4\x3e\xff\x5b\x57\x8b\x6c\x65\x6a\x52\x46\xfd\x4a\xcc\x61\x26\x47\x45\xb2\x8e\xdd\x22\xef\xa1\x83\x1f\xb1\x51\xdd\x0b\x4c\x98\x2f\x02\xd0\x65\xe8\x19\xf5\x87\x6b\x0f\x88\xa2\x78\x88\x3b\x93\x36\xa8\x09\xeb\x5b\x0e\xf3\x5e\xb2\xc3\x46\xb3\x0f\xe1\x29\x70\x9b\xa2\x4e\x8b\x33\xd6\x4c\x57\xfb\x92\x59\xe4\xbf\xcf\xf2\x73\xcf\xf1\x29\xfe\xed\x41\xf0\x38\x78\xf7\xcf\x02\xa3\x26\xe0\xf3\x38\x73\xa4\xea\x8c\x42\xf6\x8b\x95\x1e\x7f\x92\x1a\x0b\x7c\x66\x0b\x33\xf7\x96\x1e\xd7\xa2\x1c\xe4\xfb\xaf\x2f\xef\x7e\xe0\xfe\xf7\x2b\xfc\x6f\xee\xe0\x5f\xac\xdf\xd1\xf6\xc5\xe7\xf6\xdb\x17\xf0\x1f\xec\xd8\x7f\x31\x20\xf4\xdb\xe7\x7f\x04\x00\x00\xff\xff\x84\x98\xb1\x5d\xdd\x08\x00\x00")

func tmplCsharpServerGocsBytes() ([]byte, error) {
	return bindataRead(
		_tmplCsharpServerGocs,
		"tmpl/csharp/server.gocs",
	)
}

func tmplCsharpServerGocs() (*asset, error) {
	bytes, err := tmplCsharpServerGocsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/csharp/server.gocs", size: 2269, mode: os.FileMode(420), modTime: time.Unix(1461241288, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplGolangServerGogo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x57\x5f\x6f\xe3\x36\x0c\x7f\xb6\x3f\x05\x67\x1c\x76\x76\x2f\x71\xd0\x7b\x0c\xd0\x97\x5e\x07\xac\x18\x9a\xde\x9a\x1b\xf6\x30\xec\xc1\x76\x98\x44\xab\x2d\x79\xfa\xb3\x20\x67\xe4\xbb\x8f\x92\xec\x5c\xec\x18\x6b\x7b\xc0\xfe\x60\x68\x80\xd6\x16\x45\x51\xe4\x8f\xe4\x0f\x66\xd3\xac\x70\xcd\x38\x42\xa4\x50\xfe\x81\x32\x82\xe9\xe1\x10\xd6\x59\xf1\x98\x6d\x10\x9a\x26\x5d\x64\x15\x2a\x5a\x23\x89\x9b\xe6\x8d\xd5\x62\x05\x5a\x29\xcc\xaf\x20\x5d\xfa\xb5\x53\x23\x0d\x56\xd5\x42\x6a\x88\xc3\x20\xca\xf7\x1a\x55\x14\xd2\xdb\x86\xe9\xad\xc9\xd3\x42\x54\x33\x9e\x69\x35\x65\xc2\x3d\xa3\xfe\x96\xca\x2a\x83\xe5\x6c\x23\xa6\x7a\x2b\xd9\x5a\xcf\xfc\x63\xa0\x85\x9f\x73\xb3\x9f\x29\x4d\xe7\x57\x51\x98\x84\xa1\xde\xd7\x08\x9f\x9c\xea\x82\x84\x7d\x17\x0f\x87\xa5\x8b\x0a\x94\x96\xa6\xd0\xd0\x84\x41\x2b\xa0\xdf\xc5\xb8\x6e\x18\x7c\x10\x9c\x83\xfb\x5d\x58\x3f\x53\xbb\x0e\x83\x1b\x26\xb1\xd0\x3f\xe0\xde\x1a\x63\x7c\x13\x1e\xc2\x70\x6d\x78\x01\xb1\x82\x8b\xa7\x1c\x48\x40\xf0\x3b\xb5\x89\x2b\xb5\x69\x8d\xd2\x2a\xb1\xfe\x48\x0b\xa3\x0f\x35\x5d\xe0\xee\x83\xa8\x08\x6c\xfd\x51\x0a\x2d\x0a\x51\x3e\x60\xb6\x42\x19\x3b\x2c\xed\x76\xbb\x26\x33\xe9\x4d\xa6\xb3\x84\x00\x08\xd4\x8e\xe9\x62\x0b\x56\xb6\x34\xf9\x6f\xe8\xe2\x6c\x9a\x29\xc8\x8c\x53\x0e\xdf\x54\xa8\xb7\x62\xd5\xcb\xd6\x9d\x13\x29\x97\xd2\x29\xb0\x35\xfc\xa4\x59\xa9\xd2\x5b\xb5\x10\xb2\xca\x4a\xbf\xdd\x9d\x24\xad\xa0\xc8\x14\x95\xc8\x30\xb6\x94\x04\x5e\xa7\xcd\x7f\x34\xef\x0c\x76\xf2\x7b\x8e\xbb\x6c\x6f\x4d\x04\xb5\x75\xe1\xdb\xa1\x8d\xa1\x89\x07\xfc\xdd\xa0\xd2\x8d\x3d\x81\xf2\x14\x9d\x1b\x2c\xc4\x0a\x97\x2e\x93\xb1\x9c\x40\x9d\x90\x0a\x5d\x65\xb5\xbe\xb9\x02\xce\x4a\x8b\x27\xdd\x43\xd9\xd1\x25\x8f\x49\x6e\x35\x3a\x43\x57\xa0\x52\x9f\x8c\x33\xb7\xe3\x67\x9b\xa2\x7f\xbe\xf6\xd2\x5b\x5e\xc8\xf8\x69\x44\xa8\x68\x0d\xd7\x51\xe2\x70\xc1\x52\xa1\x83\x42\x5f\xda\xb8\x5a\x4b\x0b\xb1\x8b\x6d\x1e\xbf\x02\x20\x89\xea\x99\x67\x54\x2d\xb8\xc2\x7f\x18\xd5\x09\x90\x83\x2f\x80\x36\x37\x6b\x17\x8e\x2f\xf7\x6b\xb3\x5e\xa3\x74\x2e\xef\xfe\xb2\x49\x7e\x96\x4c\xdb\x26\x31\x6b\x6b\xa9\x55\xfb\x8e\x9f\xc4\xb5\x3b\x7a\xe2\xbb\x39\xfd\x68\xf2\x92\xa9\xad\x6b\xa4\x07\xac\xcb\xfd\x04\xe8\x78\x7a\x6d\x2f\x8e\x5d\x57\x05\xfa\xfd\x59\x8e\x8e\xc9\xff\xc4\x2a\x62\x80\xe7\xa4\x5f\x3b\xcd\x68\x02\xfa\x92\xfe\xde\xb7\x75\xc0\x57\x6d\xeb\x0d\xdf\x08\x07\x42\xa2\xd7\x94\xdf\x67\xca\x53\x4f\xdb\x95\x5d\x13\x1f\x5e\xca\x3f\xde\xca\xdf\x40\x41\xc1\x23\xee\x4b\xe4\xd6\x0a\x3d\x62\x95\x1e\xa9\x32\x19\x63\xa7\x5f\xbc\xfa\xbb\xcb\xf9\xaf\x5f\x4f\x54\x3d\x48\x5e\x89\xea\x95\xa8\x5e\x89\xea\x5f\x20\xaa\x17\xf0\xcf\x12\xf5\x91\x16\xe2\xc7\xe3\x57\x94\x23\xa0\x13\xc6\xa0\x3c\xd1\x66\xd8\x85\x4f\x94\xa1\x0a\xc9\x72\x74\x47\xde\x41\x94\x9e\x45\x72\x41\x3e\xab\xb4\xa3\xb7\x24\x3c\xf5\xf2\x65\x04\x79\x2d\x45\xb6\x22\x02\x19\xe1\xc8\x96\x2c\x2c\x19\x1f\xb5\xee\x8e\xa4\xf3\xdf\xfa\x86\x1b\x38\x78\xce\x8e\xf7\xfc\x1c\xc5\x11\x82\xfc\x7f\x12\xe1\x73\x82\xef\x73\xe1\x79\xe5\x7f\x59\x74\x25\x46\x69\x1d\xaf\xab\x98\x26\x22\x72\x6d\xb0\x37\x81\xc2\xce\x18\x5f\xc6\x8b\xe4\xe9\x0a\x75\x8d\x32\x9a\x10\xbf\xdf\xdc\xd2\x4d\x58\x21\xa7\x68\x99\xe0\x73\xb0\x37\xdb\xf8\xfd\x60\xe7\x4e\x3e\x75\x87\x85\xd0\xbf\xcd\x41\x4d\x68\x61\x7d\x9b\xd3\x20\x64\xdd\x9d\x84\x0e\xce\xd9\x0c\xb2\xb2\x84\xbc\xab\x32\xa0\xf9\x50\xd1\xb0\xa8\x40\x6d\x85\x29\x57\x90\x23\x18\x4e\x15\x0e\xbc\x1b\x1d\xe1\xed\x3d\x7f\xdb\x39\x32\x6c\xec\xd1\x8c\xb8\xa6\xf6\xea\x27\x7d\x99\xf4\x6d\xfc\x68\xd0\xe0\x89\xa1\x51\x2b\x11\x7e\x96\x75\x71\x6a\xce\xb6\x34\xf5\x2c\x6a\x23\x79\x2b\xed\x91\xc6\x9f\x01\x00\x00\xff\xff\x3d\xe4\xb0\x02\x13\x0f\x00\x00")

func tmplGolangServerGogoBytes() ([]byte, error) {
	return bindataRead(
		_tmplGolangServerGogo,
		"tmpl/golang/server.gogo",
	)
}

func tmplGolangServerGogo() (*asset, error) {
	bytes, err := tmplGolangServerGogoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/golang/server.gogo", size: 3859, mode: os.FileMode(420), modTime: time.Unix(1461241368, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/csharp/server.gocs": tmplCsharpServerGocs,
	"tmpl/golang/server.gogo": tmplGolangServerGogo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"csharp": &bintree{nil, map[string]*bintree{
			"server.gocs": &bintree{tmplCsharpServerGocs, map[string]*bintree{}},
		}},
		"golang": &bintree{nil, map[string]*bintree{
			"server.gogo": &bintree{tmplGolangServerGogo, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

