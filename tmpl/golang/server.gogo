{{define "server" -}}
package {{.Namespace}}
{{$serviceName := .Service.Name}}
import (
	"bytes"
	"log"

	"github.com/Wuvist/go-thrift/thrift"
	"github.com/ezbuy/ezrpc/ezrpc"
	"github.com/ezbuy/statsd"
	"github.com/nats-io/nats"
)

type ThriftNats{{$serviceName}}Server struct {
	Server    *{{$serviceName}}Server
	Conn      *nats.Conn
	DirectKey string
	Daemon    *ezrpc.Daemon
}

func (s *ThriftNats{{$serviceName}}Server) onMsg(msg *nats.Msg) {
{{- if .HasNormalMsgMethod}}
	r := thrift.NewCompactProtocolReader(bytes.NewReader(msg.Data))

	switch msg.Subject {
{{- range $method := .Service.Methods}}
{{- if Utils.IsNormalMethod $method}}
	case "{{$serviceName}}.{{$method.Name}}":
{{- if $method.Oneway}}
		p := &{{$serviceName}}{{$method.Name}}Request{}
		err := thrift.DecodeStruct(r, p)
		if err != nil {
			log.Printf("[NATS]-[{{$serviceName}}.{{$method.Name}}] decode error: %s", err)
		}
		err = s.Server.{{$method.Name}}(p)
		if err != nil {
			log.Printf("[NATS]-[{{$serviceName}}.{{$method.Name}}] service error: %s", err)
		}

		statsd.Incr("{{$serviceName}}.{{$method.Name}}.count")
{{- else}}
		t1 := statsd.Now()

		p := &{{$serviceName}}{{$method.Name}}Request{}
		res := &{{$serviceName}}{{$method.Name}}Response{}
		err := thrift.DecodeStruct(r, p)
		if err != nil {
			log.Printf("[NATS]-[{{$serviceName}}.{{$method.Name}}] decode error: %s", err)
		}
		err = s.Server.{{$method.Name}}(p, res)
		if err != nil {
			log.Printf("[NATS]-[{{$serviceName}}.{{$method.Name}}] service error: %s", err)
		}

		buf := &bytes.Buffer{}
		w := thrift.NewCompactProtocolWriter(buf)
		thrift.EncodeStruct(w, res)
		s.Conn.Publish(msg.Reply, buf.Bytes())

		t2 := statsd.Now()
		statsd.Timing("{{$serviceName}}.{{$method.Name}}.timing", t1, t2)
{{- end}}
{{- end}}
{{- end}}
	}
{{- end}}
}

{{- if Utils.HasDirectMethod .Service}}

func (s *ThriftNats{{$serviceName}}Server) onDirect(msg *nats.Msg) {
	r := thrift.NewCompactProtocolReader(bytes.NewReader(msg.Data))
	keylen := len(s.DirectKey)
	switch msg.Subject[keylen+1:] {
{{- range $method := .Service.Methods}}
{{- if Utils.IsDirectMethod $method}}
	case "{{$serviceName}}.{{$method.Name}}":
{{- if $method.Oneway}}
		p := &{{$serviceName}}{{$method.Name}}Request{}
		err := thrift.DecodeStruct(r, p)
		if err != nil {
			log.Printf("[NATS]-[{{$serviceName}}.{{$method.Name}}] decode error: %s", err)
		}
		err = s.Server.{{$method.Name}}(p)
		if err != nil {
			log.Printf("[NATS]-[{{$serviceName}}.{{$method.Name}}] service error: %s", err)
		}

		statsd.Incr("{{$serviceName}}.{{$method.Name}}.count")
{{- else}}
		t1 := statsd.Now()

		p := &{{$serviceName}}{{$method.Name}}Request{}
		res := &{{$serviceName}}{{$method.Name}}Response{}
		err := thrift.DecodeStruct(r, p)
		if err != nil {
			log.Printf("[NATS]-[{{$serviceName}}.{{$method.Name}}] decode error: %s", err)
		}
		err = s.Server.{{$method.Name}}(p, res)
		if err != nil {
			log.Printf("[NATS]-[{{$serviceName}}.{{$method.Name}}] service error: %s", err)
		}

		buf := &bytes.Buffer{}
		w := thrift.NewCompactProtocolWriter(buf)
		thrift.EncodeStruct(w, res)
		s.Conn.Publish(msg.Reply, buf.Bytes())

		t2 := statsd.Now()
		statsd.Timing("{{$serviceName}}.{{$method.Name}}.timing", t1, t2)
{{- end}}
{{- end}}
{{- end}}
	}
}

func (s *ThriftNats{{$serviceName}}Server) SetDirectKey(key string) {
	s.DirectKey = key
	s.Daemon.Subscribe(key+".{{$serviceName}}.*", s.onDirect)
}
{{- end}}

func (s *ThriftNats{{$serviceName}}Server) onBroadcast(msg *nats.Msg) {
{{- if .HasBroadcastMethod}}
	r := thrift.NewCompactProtocolReader(bytes.NewReader(msg.Data))

	switch msg.Subject {
{{- range $method := .Service.Methods}}
{{- if Utils.IsBroadcastMethod $method}}
	case "On.{{$serviceName}}.{{$method.Name}}":
		p := &{{$serviceName}}{{$method.Name}}Request{}
		err := thrift.DecodeStruct(r, p)
		if err != nil {
			log.Printf("[NATS]-[{{$serviceName}}.{{$method.Name}}] decode error: %s", err)
		}
		err = s.Server.{{$method.Name}}(p)
		if err != nil {
			log.Printf("[NATS]-[{{$serviceName}}.{{$method.Name}}] service error: %s", err)
		}

		statsd.Incr("On.{{$serviceName}}.{{$method.Name}}.count")
{{- end}}
{{- end}}
	}
{{- end}}
}

func New{{$serviceName}}Server(impl {{$serviceName}}, conn *nats.Conn, middlewares ...ezrpc.MsgMiddleware) *ThriftNats{{$serviceName}}Server {
	daemon := ezrpc.NewDaemonWithConn(conn, middlewares...)

	s := &{{$serviceName}}Server{Implementation: impl}

	server := &ThriftNats{{$serviceName}}Server{
		Server: s,
		Conn:   conn,
		Daemon: daemon,
	}

	// all broadcast messages should be under namespace 'On'
	daemon.Subscribe("On.{{$serviceName}}.*", server.onBroadcast)
	daemon.QueueSubscribe("{{$serviceName}}.*", "ezrpc", server.onMsg)

	return server
}
{{- end}}
