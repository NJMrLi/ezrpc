{{$tmpldata := . -}}
/**
 * This file is autogenerated by ezrpc
 * Don't change manually
 */
 
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace {{.Namespace}} {
	public static void onMsg(object sender, MsgHandlerEventArgs e) {
		var trans = new Thrift.Transport.TMemoryBuffer(e.Message.Data);
		var iprot = new EZProto(trans); // in
		try {
			switch (e.Message.Subject) {
			{{- range $name, $method := .Service.Methods}}
			case "{{$tmpldata.Service.Name}}.{{$name}}":
				{{- if $method.Oneway}}
				processor.{{$name}}_Process(0, iprot, null);
				{{- else}}
				var buf = new Thrift.Transport.TMemoryBuffer();
				var oprot = new EZProto(buf); // out
				
				processor.{{$name}}_Process(0, iprot, oprot);
				
				var msg = new Msg();
				msg.Subject = e.Message.Reply;
				msg.Data = buf.GetBuffer();
	
				var sub = (IAsyncSubscription)sender;
				sub.Connection.Publish(msg);
				{{- end}}
				break;
			{{- end}}
			default:
			}
		} catch (Exception ex) {
			Console.WriteLine(ex.ToString());
		}
	}	
}