{{$tmpldata := . -}}
/**
 * This file is autogenerated by ezrpc
 * Don't change manually
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;
using NATS.Client;

namespace {{.Namespace}} {
	static class {{.Service.Name}}Service {
		// Processor is generated by generator
		private static Processor processor_;
		private static IConnection conn_;

		public static void init(Processor processor, IConnection c) {
			processor_ = processor;
			conn_ = c;

			c.SubscribeAsync("On.{{.Service.Name}}.*", onBroadcast);
			c.SubscribeAsync("{{.Service.Name}}.*", "ezrpc", onMsg);
		}

		private static void onMsg(object sender, MsgHandlerEventArgs e) {
			var trans = new Thrift.Transport.TMemoryBuffer(e.Message.Data);
			var iprot = new EZProto(trans); // in
			try {
			 	TMemoryBuffer buf;
			    EZProto oprot;
			    Msg msg;

				switch (e.Message.Subject) {
				{{- range $name, $method := .Service.Methods}}
				{{- if not (Utils.IsBroadcastMethod $method)}}
				case "{{$tmpldata.Service.Name}}.{{$name}}":
					{{- if $method.Oneway}}
					processor_.{{$name}}_Process(0, iprot, null);
					{{- else}}
					buf = new Thrift.Transport.TMemoryBuffer();
					oprot = new EZProto(buf); // out

					processor_.{{$name}}_Process(0, iprot, oprot);

					msg = new Msg();
					msg.Subject = e.Message.Reply;
					msg.Data = buf.GetBuffer();

					((IAsyncSubscription)sender).Connection.Publish(msg);
					{{- end}}
					break;
				{{- end}}
				{{- end}}
				}
			} catch (Exception ex) {
				Console.WriteLine(ex.ToString());
			}
		}

		private static void onBroadcast(object sender, MsgHandlerEventArgs e) {
			var trans = new Thrift.Transport.TMemoryBuffer(e.Message.Data);
			var iprot = new EZProto(trans); // in
			try {
				switch (e.Message.Subject) {
				{{- range $name, $method := .Service.Methods}}
				{{- if Utils.IsBroadcastMethod $method}}
				case "On.{{$tmpldata.Service.Name}}.{{$name}}":
					processor_.{{$name}}_Process(0, iprot, null);
					break;
				{{- end}}
				{{- end}}
				}
			} catch (Exception ex) {
				Console.WriteLine(ex.ToString());
			}
		}
	}
}
