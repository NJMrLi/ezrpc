// This file is automatically generated. Do not modify.

package product

import (
	"fmt"
)

var _ = fmt.Sprintf

type SearchFilter struct {
	Name   string               `thrift:"1,required" json:"name"`
	Fields []*SearchFilterField `thrift:"2,required" json:"fields"`
}

type SearchFilterCond struct {
	FilterName string `thrift:"1,required" json:"filterName"`
	FieldName  string `thrift:"2,required" json:"fieldName"`
}

type SearchFilterField struct {
	Name         string `thrift:"1,required" json:"name"`
	ProductCount int32  `thrift:"2,required" json:"productCount"`
}

type SearchResult struct {
	Products []*TSimpleProduct `thrift:"1,required" json:"products"`
	Sorts    []string          `thrift:"2,required" json:"sorts"`
	Filters  []*SearchFilter   `thrift:"3,required" json:"filters"`
}

type SearchSortCond struct {
	Sort   string `thrift:"1,required" json:"sort"`
	IsDesc bool   `thrift:"2,required" json:"isDesc"`
}

type TCharacteristic struct {
	Propkey     string `thrift:"1,required" json:"propkey"`
	ActualValue string `thrift:"2,required" json:"actualValue"`
	Remark      string `thrift:"3,required" json:"remark"`
	ImageUrl    string `thrift:"4,required" json:"imageUrl"`
	IsSelected  bool   `thrift:"5,required" json:"isSelected"`
}

type TCharacteristicGroup struct {
	Name            string             `thrift:"1,required" json:"name"`
	Characteristics []*TCharacteristic `thrift:"2,required" json:"characteristics"`
}

type TProduct struct {
	Cid                       *int64                  `thrift:"1" json:"cid,omitempty"`
	VendorName                *string                 `thrift:"2" json:"vendorName,omitempty"`
	ProductName               *string                 `thrift:"3" json:"productName,omitempty"`
	UnitPrice                 *float64                `thrift:"4" json:"unitPrice,omitempty"`
	ShippingFee               *float64                `thrift:"5" json:"shippingFee,omitempty"`
	ProductUrl                *string                 `thrift:"6" json:"productUrl,omitempty"`
	ProductImage              *string                 `thrift:"7" json:"productImage,omitempty"`
	OriginCode                *string                 `thrift:"8" json:"originCode,omitempty"`
	ShopName                  *string                 `thrift:"9" json:"shopName,omitempty"`
	Location                  *string                 `thrift:"10" json:"location,omitempty"`
	AroundwWarehouse          *string                 `thrift:"11" json:"aroundwWarehouse,omitempty"`
	IsShippingFee             *bool                   `thrift:"12" json:"isShippingFee,omitempty"`
	FavoritesItemId           *int32                  `thrift:"13" json:"favoritesItemId,omitempty"`
	FavoriteCatId             *int32                  `thrift:"14" json:"favoriteCatId,omitempty"`
	SpecialHandlingFeeMessage *string                 `thrift:"15" json:"specialHandlingFeeMessage,omitempty"`
	SpecialHandlingFeePercent *float64                `thrift:"16" json:"specialHandlingFeePercent,omitempty"`
	PropertyNames             []string                `thrift:"17" json:"propertyNames,omitempty"`
	ShippingFees              []*TShippingFee         `thrift:"18" json:"shippingFees,omitempty"`
	DescriptionImages         []string                `thrift:"19" json:"descriptionImages,omitempty"`
	CharacteristicGroups      []*TCharacteristicGroup `thrift:"20" json:"characteristicGroups,omitempty"`
	Skus                      []*TSku                 `thrift:"21" json:"skus,omitempty"`
	ItemImgs                  []string                `thrift:"22" json:"itemImgs,omitempty"`
	IsEZBuy                   *bool                   `thrift:"23" json:"isEZBuy,omitempty"`
	PriceSymbol               *string                 `thrift:"24" json:"priceSymbol,omitempty"`
	LocalUnitPrice            *string                 `thrift:"25" json:"localUnitPrice,omitempty"`
	LocalShipmentFee          *float64                `thrift:"26" json:"localShipmentFee,omitempty"`
	ErrMsg                    *string                 `thrift:"27" json:"errMsg,omitempty"`
}

type TProductExtension struct {
	Cid                       *int64                  `thrift:"1" json:"cid,omitempty"`
	VendorName                string                  `thrift:"2,required" json:"vendorName"`
	ProductName               string                  `thrift:"3,required" json:"productName"`
	UnitPrice                 float64                 `thrift:"4,required" json:"unitPrice"`
	ShippingFee               float64                 `thrift:"5,required" json:"shippingFee"`
	ProductUrl                string                  `thrift:"6,required" json:"productUrl"`
	ProductImage              string                  `thrift:"7,required" json:"productImage"`
	OriginCode                string                  `thrift:"8,required" json:"originCode"`
	ShopName                  string                  `thrift:"9,required" json:"shopName"`
	Location                  string                  `thrift:"10,required" json:"location"`
	AroundwWarehouse          string                  `thrift:"11,required" json:"aroundwWarehouse"`
	IsShippingFee             bool                    `thrift:"12,required" json:"isShippingFee"`
	FavoritesItemId           int32                   `thrift:"13,required" json:"favoritesItemId"`
	FavoriteCatId             int32                   `thrift:"14,required" json:"favoriteCatId"`
	SpecialHandlingFeeMessage string                  `thrift:"15,required" json:"specialHandlingFeeMessage"`
	SpecialHandlingFeePercent float64                 `thrift:"16,required" json:"specialHandlingFeePercent"`
	PropertyNames             []string                `thrift:"17" json:"propertyNames,omitempty"`
	ShippingFees              []*TShippingFee         `thrift:"18,required" json:"shippingFees"`
	DescriptionImages         []string                `thrift:"19" json:"descriptionImages,omitempty"`
	CharacteristicGroups      []*TCharacteristicGroup `thrift:"20" json:"characteristicGroups,omitempty"`
	Skus                      []*TSku                 `thrift:"21" json:"skus,omitempty"`
	ItemImgs                  []string                `thrift:"22" json:"itemImgs,omitempty"`
	IsEZBuy                   *bool                   `thrift:"23" json:"isEZBuy,omitempty"`
	PriceSymbol               string                  `thrift:"24,required" json:"priceSymbol"`
	LocalUnitPrice            string                  `thrift:"25,required" json:"localUnitPrice"`
	LocalShipmentFee          float64                 `thrift:"26,required" json:"localShipmentFee"`
	ErrMsg                    *string                 `thrift:"27" json:"errMsg,omitempty"`
	Eta                       *string                 `thrift:"28" json:"eta,omitempty"`
	DisplayShippingIcon       *bool                   `thrift:"29" json:"displayShippingIcon,omitempty"`
	AltProductName            *string                 `thrift:"30" json:"altProductName,omitempty"`
	AltCharacteristicGroups   []*TCharacteristicGroup `thrift:"31" json:"altCharacteristicGroups,omitempty"`
	PrimeAvailable            bool                    `thrift:"32,required" json:"primeAvailable"`
}

type TProductReviewCount struct {
	All      int32 `thrift:"1,required" json:"all"`
	HasPhoto int32 `thrift:"2,required" json:"hasPhoto"`
}

type TProductReviewDetail struct {
	Id            int32   `thrift:"1,required" json:"id"`
	ProductUrl    string  `thrift:"2,required" json:"productUrl"`
	UserId        int32   `thrift:"3,required" json:"userId"`
	Rating        int32   `thrift:"4,required" json:"rating"`
	HelpfulCount  *int32  `thrift:"5" json:"helpfulCount,omitempty"`
	Comment       string  `thrift:"6,required" json:"comment"`
	Pictures      *string `thrift:"7" json:"pictures,omitempty"`
	SetHelpful    bool    `thrift:"8,required" json:"setHelpful"`
	NickName      string  `thrift:"9,required" json:"nickName"`
	HeadPortraits string  `thrift:"10,required" json:"headPortraits"`
	Sku           *string `thrift:"11" json:"sku,omitempty"`
	CreateDate    string  `thrift:"12,required" json:"createDate"`
}

type TShippingFee struct {
	Warehouse string  `thrift:"1,required" json:"warehouse"`
	Fee       float64 `thrift:"2,required" json:"fee"`
	LocalFee  float64 `thrift:"3,required" json:"localFee"`
}

type TSimpleProduct struct {
	ProductName    string `thrift:"1,required" json:"productName"`
	ProductUrl     string `thrift:"2,required" json:"productUrl"`
	ProductImage   string `thrift:"3,required" json:"productImage"`
	OriginCode     string `thrift:"4,required" json:"originCode"`
	IsEZBuy        bool   `thrift:"5,required" json:"isEZBuy"`
	LocalUnitPrice string `thrift:"6,required" json:"localUnitPrice"`
}

type TSku struct {
	Price            string `thrift:"1,required" json:"price"`
	Properties       string `thrift:"2,required" json:"properties"`
	PropertiesName   string `thrift:"3,required" json:"propertiesName"`
	Quantity         int64  `thrift:"4,required" json:"quantity"`
	SkuId            int64  `thrift:"5,required" json:"skuId"`
	SkuSpecId        int64  `thrift:"6,required" json:"skuSpecId"`
	Status           string `thrift:"7,required" json:"status"`
	WithHoldQuantity int64  `thrift:"8,required" json:"withHoldQuantity"`
}

type TwitterUnavailable struct {
	Message string `thrift:"1,required" json:"message"`
}

func (e *TwitterUnavailable) Error() string {
	return fmt.Sprintf("TwitterUnavailable{Message: %+v}", e.Message)
}

type Product interface {
	DirectGetProductDetail(productUrl string, purchaseSource string) (*TProduct, error)
	DirectOnCacheEvict() error
	GetProductDetail(productUrl string, purchaseSource string) (*TProduct, error)
	OnCacheEvict(arg string) error
	OnExchangeUpdate() error
	Ping() error
}

type ProductServer struct {
	Implementation Product
}

func (s *ProductServer) DirectGetProductDetail(req *ProductDirectGetProductDetailRequest, res *ProductDirectGetProductDetailResponse) error {
	val, err := s.Implementation.DirectGetProductDetail(req.ProductUrl, req.PurchaseSource)
	switch e := err.(type) {
	case *TwitterUnavailable:
		res.Cond = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *ProductServer) DirectOnCacheEvict(req *ProductDirectOnCacheEvictRequest) error {
	err := s.Implementation.DirectOnCacheEvict()
	return err
}

func (s *ProductServer) GetProductDetail(req *ProductGetProductDetailRequest, res *ProductGetProductDetailResponse) error {
	val, err := s.Implementation.GetProductDetail(req.ProductUrl, req.PurchaseSource)
	switch e := err.(type) {
	case *TwitterUnavailable:
		res.Cond = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *ProductServer) OnCacheEvict(req *ProductOnCacheEvictRequest) error {
	err := s.Implementation.OnCacheEvict(req.Arg)
	return err
}

func (s *ProductServer) OnExchangeUpdate(req *ProductOnExchangeUpdateRequest) error {
	err := s.Implementation.OnExchangeUpdate()
	return err
}

func (s *ProductServer) Ping(req *ProductPingRequest) error {
	err := s.Implementation.Ping()
	return err
}

type ProductDirectGetProductDetailRequest struct {
	ProductUrl     string `thrift:"1,required" json:"productUrl"`
	PurchaseSource string `thrift:"2,required" json:"purchaseSource"`
}

type ProductDirectGetProductDetailResponse struct {
	Value *TProduct           `thrift:"0" json:"value,omitempty"`
	Cond  *TwitterUnavailable `thrift:"1" json:"cond,omitempty"`
}

type ProductDirectOnCacheEvictRequest struct {
}

func (r *ProductDirectOnCacheEvictRequest) Oneway() bool {
	return true
}

type ProductGetProductDetailRequest struct {
	ProductUrl     string `thrift:"1,required" json:"productUrl"`
	PurchaseSource string `thrift:"2,required" json:"purchaseSource"`
}

type ProductGetProductDetailResponse struct {
	Value *TProduct           `thrift:"0" json:"value,omitempty"`
	Cond  *TwitterUnavailable `thrift:"1" json:"cond,omitempty"`
}

type ProductOnCacheEvictRequest struct {
	Arg string `thrift:"1,required" json:"arg"`
}

func (r *ProductOnCacheEvictRequest) Oneway() bool {
	return true
}

type ProductOnExchangeUpdateRequest struct {
}

func (r *ProductOnExchangeUpdateRequest) Oneway() bool {
	return true
}

type ProductPingRequest struct {
}

func (r *ProductPingRequest) Oneway() bool {
	return true
}

type ProductClient struct {
	Client RPCClient
}

func (s *ProductClient) DirectGetProductDetail(productUrl string, purchaseSource string) (ret *TProduct, err error) {
	req := &ProductDirectGetProductDetailRequest{
		ProductUrl:     productUrl,
		PurchaseSource: purchaseSource,
	}
	res := &ProductDirectGetProductDetailResponse{}
	err = s.Client.Call("DirectGetProductDetail", req, res)
	if err == nil {
		switch {
		case res.Cond != nil:
			err = res.Cond
		}
	}
	if err == nil {
		ret = res.Value
	}
	return
}

func (s *ProductClient) DirectOnCacheEvict() (err error) {
	req := &ProductDirectOnCacheEvictRequest{}
	var res interface{} = nil
	err = s.Client.Call("DirectOnCacheEvict", req, res)
	return
}

func (s *ProductClient) GetProductDetail(productUrl string, purchaseSource string) (ret *TProduct, err error) {
	req := &ProductGetProductDetailRequest{
		ProductUrl:     productUrl,
		PurchaseSource: purchaseSource,
	}
	res := &ProductGetProductDetailResponse{}
	err = s.Client.Call("GetProductDetail", req, res)
	if err == nil {
		switch {
		case res.Cond != nil:
			err = res.Cond
		}
	}
	if err == nil {
		ret = res.Value
	}
	return
}

func (s *ProductClient) OnCacheEvict(arg string) (err error) {
	req := &ProductOnCacheEvictRequest{
		Arg: arg,
	}
	var res interface{} = nil
	err = s.Client.Call("OnCacheEvict", req, res)
	return
}

func (s *ProductClient) OnExchangeUpdate() (err error) {
	req := &ProductOnExchangeUpdateRequest{}
	var res interface{} = nil
	err = s.Client.Call("OnExchangeUpdate", req, res)
	return
}

func (s *ProductClient) Ping() (err error) {
	req := &ProductPingRequest{}
	var res interface{} = nil
	err = s.Client.Call("Ping", req, res)
	return
}
